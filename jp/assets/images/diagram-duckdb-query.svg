<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="10882px" height="4921px" viewBox="-0.5 -0.5 10882 4921" class="ge-export-svg-dark" style="background-color: rgb(0, 0, 0);"><defs><linearGradient x1="0%" y1="100%" x2="0%" y2="0%" id="mx-gradient-fff2a1-1-fff9b2-1-s-0"><stop offset="0%" style="stop-color: rgb(255, 249, 178); stop-opacity: 1;"/><stop offset="100%" style="stop-color: rgb(255, 242, 161); stop-opacity: 1;"/></linearGradient><style type="text/css">svg.ge-export-svg-dark:not(mjx-container &gt; svg) { filter: invert(100%) hue-rotate(180deg); }&#xa;svg.ge-export-svg-dark foreignObject img,&#xa;svg.ge-export-svg-dark image:not(svg.ge-export-svg-dark switch image),&#xa;svg.ge-export-svg-dark svg:not(mjx-container &gt; svg)&#xa;{ filter: invert(100%) hue-rotate(180deg) }</style></defs><rect fill="#ffffff" width="100%" height="100%" x="0" y="0"/><g><g data-cell-id="0"><g data-cell-id="1"><g data-cell-id="hCfBpjkJYw5AOTarbrzr-3"><g><rect x="1394" y="890" width="730" height="1410" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 728px; height: 1px; padding-top: 897px; margin-left: 1396px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>main/client_context.cpp</div><div><br /></div><div><font color="#006633">ClientContext::<b><i>Query</i></b></font><font color="#006633"><i>(const string &amp;query, bool allow_stream_result)</i><br /><span style="white-space: pre;">	</span>if (!<b>ParseStatements</b>(*lock, query, statements, error)) { // ...</font></div><div><font color="#006633"><span style="white-space: pre;">	</span>for (idx_t i = 0; i &lt; statements.size(); i++) {  // ...<br /></font></div><div><font color="#006633"><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span><span style="background-color: initial;">auto &amp;statement = statements[i];</span><br /></font></div><div><font color="#006633"><span style="background-color: initial;"><span style="white-space: pre;"><span style="white-space: pre;">	</span>	</span></span><span style="background-color: initial;">auto pending_query = <b><u>PendingQueryInternal</u></b>(*lock, std::move(statement), parameters);  // ...</span></font></div><div><font color="#006633"><span style="background-color: initial;"><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>current_result = </span><span data-token-index="1" class="notion-enable-hover" style="background-color: initial; font-weight: 600;"><u>ExecutePendingQueryInternal</u></span><span data-token-index="1" class="notion-enable-hover" style="background-color: initial;">(*lock, *pending_query);  // ...</span></font><br /></div><div><span style="color: rgb(0, 102, 51); background-color: initial;"><br /></span></div><div><font color="#006633">ClientContext::<b><i>PendingQueryInternal</i></b></font><i><span style="background-color: initial;"><font color="#006633">(ClientContextLock &amp;lock, </font></span><span style="color: rgb(0, 102, 51); background-color: initial;">unique_ptr&lt;SQLStatement&gt; statement,</span></i></div><div><i><font color="#006633">                                                               const PendingQueryParameters &amp;parameters, </font><span style="color: rgb(0, 102, 51); background-color: initial;">bool verify) {</span></i></div><div><font color="#006633"><span style="white-space: pre;">	</span>return <b><u>PendingStatementOrPreparedStatement</u></b>(lock, query, std::move(statement), prepared, parameters);<br /></font></div><div><font color="#006633"><br /></font></div><div><font color="#006633"><i>ClientContext::<span style="font-weight: bold;">PendingStatementOrPreparedStatement</span><span style="background-color: initial;">(</span></i></font><i style="background-color: initial; color: rgb(0, 102, 51);">ClientContextLock &amp;lock, const string &amp;query, </i></div><div><i style="background-color: initial; color: rgb(0, 102, 51);"><span style="white-space: pre;"><span style="white-space: pre;">	</span>	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>unique_ptr&lt;SQLStatement&gt;statement, </i><i style="background-color: initial;"><span style="color: rgb(0, 102, 51); background-color: initial;">shared_ptr&lt;PreparedStatementData&gt; &amp;prepared, </span></i></div><div><i style="background-color: initial;"><span style="color: rgb(0, 102, 51); background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>const PendingQueryParameters &amp;parameters) </span></i></div><div><font color="#006633"><span style="white-space: pre;">	</span><b>BeginQueryInternal</b>(lock, query);<br /></font></div><div><font color="#006633"><span style="white-space: pre;">	</span>result = <b><u>PendingStatementInternal</u></b>(lock, query, std::move(statement), parameters);<br /></font></div><div><br /></div><div><font color="#006633"><i>ClientContext::<b style="">PendingStatementInternal</b><span style="background-color: initial;">(ClientContextLock &amp;lock, const string &amp;query,</span><br /></i></font></div><div><font color="#006633"><i>                                                                       unique_ptr&lt;SQLStatement&gt; statement,</i></font></div><div><font color="#006633"><i>                                                                       const PendingQueryParameters &amp;parameters)</i></font></div><div><font color="#006633"><span style="white-space: pre;">	</span>auto prepared = <b><u>CreatePreparedStatement</u></b>(lock, query, std::move(statement), parameters.parameters);</font><br /></div><div><font color="#006633"><div><span style="white-space: pre;">	</span>// execute the prepared statement</div><div><span style="white-space: pre;">	</span>return <b><u>PendingPreparedStatement</u></b>(lock, std::move(prepared), parameters);</div></font></div><div><font color="#006633"><br /></font></div><div><font color="#006633">ClientContext::<i style=""><b>CreatePreparedStatement</b><span style="background-color: initial;"><b>(</b>ClientContextLock &amp;lock, const string &amp;query, </span></i></font></div><div><font color="#006633"><i><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>unique_ptr&lt;SQLStatement&gt; statement, </span></i></font><span style="color: rgb(0, 102, 51); background-color: initial;"><i>optional_ptr&lt;case_insensitive_map_t&lt;Value&gt;&gt; values,</i></span></div><div><span style="color: rgb(0, 102, 51); background-color: initial;"><i style=""><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>PreparedStatementMode mode)</i></span></div><div><font color="#006633"><span style="white-space: pre;">	</span>auto result = make_shared&lt;PreparedStatementData&gt;(statement_type);</font></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span>Planner planner(*this);</font></span></div><div><font color="#006633"><span style="white-space: pre;">	</span>planner.<b><u>CreatePlan</u></b>(std::move(statement));<br /></font></div><div><font color="#006633"><span style="white-space: pre;">	</span>auto <b>plan</b> = std::move(planner.plan);<br /></font></div><div><font color="#006633"><div><span style="white-space: pre;">	</span>Optimizer optimizer(*planner.binder, *this);</div><div><span style="white-space: pre;">	</span>plan = optimizer.<b><u>Optimize</u></b>(std::move(plan));</div></font></div><div><font color="#006633"><div><span style="white-space: pre;">	</span>PhysicalPlanGenerator physical_planner(*this);</div><div><span style="white-space: pre;">	</span>auto physical_plan = physical_planner.<b><u>CreatePlan</u></b>(std::move(plan));</div><div><div><span style="white-space: pre;">	</span>result-&gt;plan = std::move(physical_plan);</div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>return result;</span></div></div></font></div><div><font color="#006633"><br /></font></div><div><font color="#006633">ClientContext::<i style=""><b>PendingPreparedStatement</b><span style="background-color: initial;">(ClientContextLock &amp;lock, const string &amp;query,</span><br /></i></font></div><div><font color="#006633"><i>                                               unique_ptr&lt;SQLStatement&gt; statement,</i></font></div><div><font color="#006633"><i style="">                                               optional_ptr&lt;case_insensitive_map_t&lt;Value&gt;&gt; values)</i></font></div><div><font color="#006633"><u><span style="font-style: italic; white-space: pre;">	</span>active_query-&gt;executor = make_uniq&lt;Executor&gt;(*this);</u><br /></font></div><div><font color="#006633"><b style=""><u><span style="white-space: pre;">	</span>executor.Initialize(*statement.plan);  // or </u></b></font><span style="background-color: initial;"><font color="#006633">executor.Initialize(std::move(collector));</font></span></div><div><span style="background-color: initial;"><font color="#006633"><div><span style="white-space: pre;">	</span>auto pending_result = <span style="background-color: initial;">make_uniq&lt;PendingQueryResult&gt;(shared_from_this(), *statement_p, std::move(types), </span></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>    stream_result);</span></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span>return pending_result;</span></div></font></span></div><div><span style="background-color: initial;"><font color="#006633"><br /></font></span></div><div><div><span style="color: rgb(0, 102, 51); background-color: initial;">ClientContext::<b><i>ExecutePendingQueryInternal</i></b></span><br /></div><div><font color="#006633"><span style="white-space: pre;">	</span>return query.<b><u>ExecuteInternal</u></b>(lock);</font></div></div><div><font color="#006633"><br /></font></div><div><font color="#006633"><div>PendingExecutionResult ClientContext::<b><i>ExecuteTaskInternal</i></b>(ClientContextLock &amp;lock, BaseQueryResult &amp;result,</div><div>                                                          <span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>    bool dry_run) {</div><div><span style="white-space: pre;">	</span><span style="background-color: initial;">try {<br />		<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>auto query_result = active_query-&gt;executor-&gt;<b><u>ExecuteTask</u></b>(dry_run);</span><br /></div><div><span style="background-color: initial;"><br /></span></div><div><span style="background-color: initial;"><div>PendingExecutionResult ClientContext::<b><i>ExecuteTaskInternal</i></b>(ClientContextLock &amp;lock, BaseQueryResult &amp;result,</div><div>                                                          bool dry_run) {</div><div><div><span style="white-space: pre;">	</span>try {</div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>auto query_result = active_query-&gt;executor-&gt;<b><u>ExecuteTask</u></b>(dry_run);</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>return query_result;</span></div></div></span></div><div><br /></div><div><span style="color: rgb(0, 0, 0);">main/pending_query_result.cpp</span></div><div><br /></div><div>unique_ptr&lt;QueryResult&gt; PendingQueryResult::ExecuteInternal(ClientContextLock &amp;lock) {</div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>CheckExecutableInternal(lock);</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>// Busy wait while execution is not finished</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>if (allow_stream_result) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>while (!IsFinishedOrBlocked(<b><u>ExecuteTaskInternal</u></b>(lock))) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>}</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>} else {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>while (!IsFinished(<b><u>ExecuteTaskInternal</u></b>(lock))) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>}</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>} // Error handling...</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>auto result = context-&gt;FetchResultInternal(lock, *this);</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>Close();</span></div><div><span style="white-space: normal;"><span style="background-color: initial; white-space: pre;">	</span><span style="background-color: initial;">return result;</span></span><span style="color: rgb(0, 0, 0);"><br /></span></div><div><span style="white-space: normal;"><span style="background-color: initial;"><br /></span></span></div><div><span style="background-color: initial;"><div style="">PendingExecutionResult PendingQueryResult::<i><b>ExecuteTaskInternal</b>(ClientContextLock &amp;lock) {</i></div><div style=""><span style="white-space:pre">	</span>CheckExecutableInternal(lock);</div><div style=""><span style="white-space: pre;">	</span>return context-&gt;<b><u>ExecuteTaskInternal</u></b>(lock, *this, false);</div></span></div></font></div></div></div></div></foreignObject><text x="1396" y="911" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">main/client_context.cpp...</text></switch></g></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-32"><g><rect x="1393" y="1847.5" width="731" height="95" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="0rRjchkaSUUTLkPYM30E-19"><g><path d="M 4935 3335 L 4815.87 3385.03" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4811.03 3387.07 L 4816.13 3381.13 L 4815.87 3385.03 L 4818.84 3387.58 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="0rRjchkaSUUTLkPYM30E-1"><g><rect x="4935" y="3080" width="780" height="690" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 778px; height: 1px; padding-top: 3087px; margin-left: 4937px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/table/row_group.cpp</div><div><br /></div><div><span style="color: rgb(102, 0, 0);">private:</span></div><div><span style="color: rgb(102, 0, 0);"><span style="white-space: pre;">	</span>vector&lt;MetaBlockPointer&gt; column_pointers;</span><br /></div><div><span style="color: rgb(102, 0, 0);"><br /></span></div><div><div style=""><font color="#660000">RowGroup::RowGroup(RowGroupCollection &amp;collection_p, RowGroupPointer pointer)</font></div><div style=""><font color="#660000">    : SegmentBase&lt;RowGroup&gt;(pointer.row_start, pointer.tuple_count), collection(collection_p), allocation_size(0) {</font></div><div style=""><font color="#660000"><span style="white-space: normal;"><span style="white-space:pre">	</span>// deserialize the columns</span></font></div><div style=""><font color="#660000"><span style="white-space: normal;"><span style="white-space:pre">	</span>if (pointer.data_pointers.size() != collection_p.GetTypes().size()) {</span></font></div><div style=""><font color="#660000"><span style="white-space: normal;"><span style="white-space:pre">		</span>throw IOException("Row group column count is unaligned with table column count. Corrupt file?");</span></font></div><div style=""><font color="#660000"><span style="white-space: normal;"><span style="white-space:pre">	</span>}</span></font></div><div style=""><font color="#660000"><span style="white-space: normal;"><span style="white-space: pre;">	</span><u>this-&gt;column_pointers = std::move(pointer.data_pointers);</u></span></font></div></div><font color="#003366"><div><font color="#003366"><br /></font></div>RowGroup::<i><b>InitializeScan</b></i></font><div style="font-size: 14px;"><div style="font-size: 14px;"><div style="font-size: 14px;"><font color="#003366"><span style="white-space: pre;">	</span>auto &amp;column_data = <b style="font-size: 14px;"><u style="font-size: 14px;">GetColumn</u></b>(column);</font></div><div style="font-size: 14px;"><font color="#003366"><span style="white-space: pre;">	</span>column_data.<b><u>InitializeScan</u></b>(state.column_scans[i]);</font></div></div></div><div style="font-size: 14px;"><br style="font-size: 14px;" /></div><div style=""><font color="#660000">ColumnData &amp;RowGroup::<b><i>GetColumn</i></b><i>(storage_t c)  </i></font></div><div style=""><span style="background-color: initial;"><font color="#660000">// typedef duckdb::idx_t duckdb::storage_t ! Type used for storage (column) identifiers</font></span></div><div style=""><div style="font-size: 14px;"><font color="#660000"><span style="white-space: pre;">	</span>auto &amp;metadata_manager = <b><u>GetCollection</u></b>().<b><u>GetMetadataManager</u></b>();</font></div><div style=""><font color="#660000" style="font-size: 14px;"><span style="white-space: pre;">	</span></font><span style="background-color: initial;"><font color="#660000">auto &amp;block_pointer = column_pointers[c];</font></span></div><div style="font-size: 14px;"><font color="#660000"><span style="white-space: pre;">	</span>MetadataReader <b>column_data_reader</b>(metadata_manager, block_pointer);</font></div><div style="font-size: 14px;"><font color="#660000"><span style="white-space: pre;">	</span>this-&gt;columns[c] = ColumnData::<b style="font-size: 14px;"><u style="font-size: 14px;">Deserialize</u></b>(GetBlockManager(), GetTableInfo(), c, start, <b>column_data_reader</b>,</font></div><div style="font-size: 14px;"><font color="#660000"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>types[c], </font><span style="color: rgb(102, 0, 0); background-color: initial;">nullptr);</span></div><div style=""><font color="#660000" style="font-size: 14px;"><span style="white-space: pre;">	</span></font><span style="background-color: initial;"><font color="#660000">return *columns[c];</font></span></div><div style=""><span style="background-color: initial;"><font color="#660000"><br /></font></span></div><div style=""><span style="background-color: initial;"><font color="#994c00">RowGroupWriteData RowGroup::WriteToDisk(RowGroupWriteInfo &amp;info) {</font><br /></span></div><div style=""><span style="background-color: initial;"><font color="#994c00"><div><span style="white-space:pre">	</span>// Checkpoint the individual columns of the row group</div><div><span style="white-space:pre">	</span><u>// Here we're iterating over columns. Each column can have multiple segments.</u></div><div><span style="white-space:pre">	</span><u>// (Some columns will be wider than others, and require different numbers</u></div><div><u><span style="white-space:pre">	</span>// of blocks to encode.) Segments cannot span blocks.</u></div><div><span style="white-space:pre">	</span>//</div><div><span style="white-space:pre">	</span>// Some of these columns are composite (list, struct). The data is written</div><div><span style="white-space:pre">	</span>// first sequentially, and the pointers are written later, so that the</div><div><span style="white-space:pre">	</span>// pointers all end up densely packed, and thus more cache-friendly.</div><div><span style="white-space:pre">	</span>for (idx_t column_idx = 0; column_idx &lt; GetColumnCount(); column_idx++) {</div><div><span style="white-space:pre">		</span>auto &amp;column = GetColumn(column_idx);</div><div><span style="white-space:pre">		</span>ColumnCheckpointInfo checkpoint_info(info, column_idx);</div><div><span style="white-space:pre">		</span>auto checkpoint_state = column.<b><u>Checkpoint</u></b>(*this, checkpoint_info);</div></font></span></div></div></div></div></div></foreignObject><text x="4937" y="3101" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/table/row_group.cpp...</text></switch></g></g></g><g data-cell-id="0rRjchkaSUUTLkPYM30E-7"><g><path d="M 6484 1795 L 6592.56 2056.62" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 6594.57 2061.47 L 6588.66 2056.34 L 6592.56 2056.62 L 6595.12 2053.66 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-28"><g><path d="M 6484 1795 L 6592.06 1587.65" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 6594.48 1582.99 L 6594.35 1590.82 L 6592.06 1587.65 L 6588.14 1587.58 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="0rRjchkaSUUTLkPYM30E-2"><g><rect x="5774" y="1510" width="710" height="1140" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 708px; height: 1px; padding-top: 1517px; margin-left: 5776px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/table/column_data.cpp</div><div><font color="#660000"><br /></font></div><div><div style="color: rgb(0, 102, 51);">void ColumnData::<b><i>InitializeScanWithOffset</i></b>(ColumnScanState &amp;state, idx_t row_idx) {</div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>state.current = data.GetSegment(row_idx);</div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>state.segment_tree = &amp;data;</div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>state.row_index = row_idx;</div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>state.internal_index = state.current-&gt;start;</div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>state.initialized = false;</div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>state.scan_state.reset();</div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>state.last_offset = 0;</div><div style="color: rgb(0, 102, 51);">}</div></div><div><font color="#660000"><br /></font></div><font color="#660000">ColumnData::<b><i>Deserialize</i></b></font><span style="background-color: initial;"><font color="#660000"><i style="">(BlockManager &amp;block_manager, DataTableInfo &amp;info, idx_t column_index,</i></font></span><div><font color="#660000"><i style="">                                               idx_t start_row, ReadStream &amp;<b>source</b>, const LogicalType &amp;type)</i></font></div><div><div><font color="#660000"><span style="white-space: pre;">	</span>BinaryDeserializer deserializer(<b>source</b>);</font></div><div><font color="#660000"><span style="white-space: pre;">	</span>auto entry = ColumnData::CreateColumn(block_manager, info, column_index, start_row, type, parent);</font></div><div><font color="#660000"><span style="white-space: pre;">	</span>entry-&gt;<b><u>DeserializeColumn</u></b>(deserializer);</font></div><div><font color="#660000"><span style="white-space: pre;">	</span>return entry;</font></div></div><div><font color="#660000"><br /></font></div><div><div><font color="#660000">ColumnData::<b><i>DeserializeColumn</i></b></font><span style="background-color: initial;"><font color="#660000"><i style="">(Deserializer &amp;deserializer, BaseStatistics &amp;target_stats)</i></font></span></div><div><font color="#660000"><span style="white-space: pre;">	</span>vector&lt;<b><u>DataPointer</u></b>&gt; data_pointers;</font></div><div></div><div></div><div></div><div></div><div><span style="white-space: pre;">	</span><span style="color: rgb(102, 0, 0); background-color: initial;">deserializer.ReadProperty(100, "data_pointers", data_pointers);</span><br /></div><div><span style="color: rgb(102, 0, 0); background-color: initial;"><span style="white-space: pre;">	</span>for (auto &amp;data_pointer : data_pointers) {<br /></span></div><div><font color="#660000"><span style="white-space: pre;"><span style="white-space: pre;">	</span>	</span>auto segment = ColumnSegment::<b><u>CreatePersistentSegment</u></b>(</font></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>data_pointer.block_pointer.block_id, </font></span><span style="color: rgb(102, 0, 0); background-color: initial;">data_pointer.</span><u style="color: rgb(102, 0, 0); background-color: initial;">compression_type</u><span style="color: rgb(102, 0, 0); background-color: initial;">, // ...</span></div><div><font color="#660000"><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>data.AppendSegment(std::move(segment));</font></div></div><div><font color="#660000"><span style="white-space: pre;">	</span>}<br /></font></div><div><br /></div><div><font color="#003366">ColumnData::<b><i>InitializeScan</i></b><br /></font></div><div><div><font color="#003366"><span style="white-space: pre;">	</span>state.current = data.GetRootSegment();</font></div><div><span style="background-color: initial;"><font color="#003366"><span style="white-space: pre;">	</span>state.segment_tree = &amp;data;  // ... state initialization</font></span></div></div><div><span style="background-color: initial;"><font color="#003366"><br /></font></span></div><div><span style="background-color: initial;"><font color="#006633">idx_t ColumnData::<b><i>Scan</i></b></font></span><span style="background-color: initial;"><font color="#003366"><br /></font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span>return <b><u>ScanVector</u></b>&lt;false, true&gt;(transaction, vector_index, state, result);<br /></font></span></div><div><span style="background-color: initial;"><font color="#006633"><br /></font></span></div><div><span style="background-color: initial;"><font color="#006633">idx_t ColumnData::<b><i>ScanVector</i></b>(TransactionData transaction, idx_t vector_index, ColumnScanState &amp;state, </font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>   Vector &amp;result)<br /></font></span></div><div><span style="background-color: initial;"><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span><span style="background-color: initial;">auto scan_count = <b><u>ScanVector</u></b>(state, result, vector_count, HasUpdates());</span></div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>FetchUpdates(transaction, vector_index, result, scan_count, ALLOW_UPDATES, SCAN_COMMITTED);</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">	</span>return scan_count;</div><div style="color: rgb(0, 102, 51);"><br /></div><div style="color: rgb(0, 102, 51);">idx_t ColumnData::<b><u><i>ScanVector</i></u></b>(ColumnScanState &amp;state, Vector &amp;result, idx_t remaining, bool has_updates) {<br /></div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span><span style="background-color: initial;">if (!state.initialized) {</span></div><div style=""><span style="background-color: initial;">		<span style="color: rgb(0, 102, 51); white-space: pre;">	<span style="white-space: pre;">	</span></span><font color="#003366">state.current-&gt;InitializeScan(state);</font></span><br /></div><div style="color: rgb(0, 102, 51);"><span style="background-color: initial;"><span style="white-space: pre;">	</span></span><span style="background-color: initial;">while (remaining &gt; 0) {</span></div><div style="color: rgb(0, 102, 51);"><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span></span><span style="background-color: initial;">if (scan_count &gt; 0) { </span></div><div style="color: rgb(0, 102, 51);"><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>if (state.scan_options &amp;&amp; state.scan_options-&gt;force_fetch_row) {</span></div><div style="color: rgb(0, 102, 51);"><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span> for (idx_t i = 0; i &lt; scan_count; i++) {<br />					<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>state.current-&gt;FetchRow(fetch_state, UnsafeNumericCast&lt;row_t&gt;(state.row_index + i), <span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>result, result_offset + i);</span></div><div style="color: rgb(0, 102, 51);"><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>}<br />			<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>} else {<br />				<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>bool entire_vector = !has_updates &amp;&amp; scan_count == initial_remaining;<br />				<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>state.current-&gt;<b><u>Scan</u></b>(state, scan_count, result, result_offset, entire_vector);<br />			<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>}<br />			<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>state.row_index += scan_count;<br />			<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>remaining -= scan_count;<br />		<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>}</span></div><div style="color: rgb(0, 102, 51);"><span style="background-color: initial;"><br /></span></div><div style="color: rgb(0, 102, 51);"><div style="color: rgb(0, 0, 0);"><font color="#994c00">unique_ptr&lt;ColumnCheckpointState&gt; ColumnData::Checkpoint(RowGroup &amp;row_group, </font></div><div style="color: rgb(0, 0, 0);"><font color="#994c00"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>      ColumnCheckpointInfo &amp;checkpoint_info)</font><br /></div><div style="color: rgb(0, 0, 0);"><font color="#994c00"><span style="white-space: pre;">	</span></font><span style="background-color: initial;"><font color="#994c00">ColumnDataCheckpointer checkpointer(*this, row_group, *checkpoint_state, checkpoint_info);</font></span></div><div style="color: rgb(0, 0, 0);"><span style="background-color: initial;"><font color="#994c00"><span style="white-space: pre;">	</span>checkpointer.<b><u>Checkpoint</u></b>(std::move(nodes));</font></span></div></div></span></div></div></div></div></foreignObject><text x="5776" y="1531" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/table/column_data.cpp...</text></switch></g></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-30"><g><path d="M 7326 2062.5 L 7360 2062.5 L 7360 1975 L 7387.63 1975" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 7392.88 1975 L 7385.88 1978.5 L 7387.63 1975 L 7385.88 1971.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="0rRjchkaSUUTLkPYM30E-20"><g><path d="M 4810 3427.5 L 4931.3 3257.68" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4934.35 3253.41 L 4933.13 3261.14 L 4931.3 3257.68 L 4927.43 3257.07 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="0rRjchkaSUUTLkPYM30E-8"><g><rect x="4335" y="3367.5" width="475" height="80" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 473px; height: 1px; padding-top: 3375px; margin-left: 4337px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><font color="#660000">RowGroupCollection:</font></div><div><font color="#660000">MetadataManager &amp;<b><u>RowGroupCollection</u></b>::<b><i>GetMetadataManager</i></b>() {</font></div><div><font color="#660000"><span style="white-space: pre;">	</span>return GetBlockManager().GetMetadataManager();</font></div><div><font color="#660000">}</font></div><div><br /></div></div></div></div></foreignObject><text x="4337" y="3389" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">RowGroupCollection:...</text></switch></g></g></g><g data-cell-id="0rRjchkaSUUTLkPYM30E-11"><g><path d="M 4265 3407.5 L 4328.63 3407.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4333.88 3407.5 L 4326.88 3411 L 4328.63 3407.5 L 4326.88 3404 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="0rRjchkaSUUTLkPYM30E-14"><g><path d="M 3975 3460 L 3975 3503.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 3975 3508.88 L 3971.5 3501.88 L 3975 3503.63 L 3978.5 3501.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="0rRjchkaSUUTLkPYM30E-10"><g><rect x="3685" y="3355" width="580" height="105" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 578px; height: 1px; padding-top: 3362px; margin-left: 3687px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/data_table.cpp</div><div><br /></div><div><font color="#660000">DataTable: DataTable::<b><i>DataTable</i></b>()</font></div><div><font color="#660000"><span style="white-space: pre;">	</span>this-&gt;<b>row_groups</b> = make_shared&lt;<b><u>RowGroupCollection</u></b>&gt;(info, <span style="white-space: pre;">	<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span></span>TableIOManager::Get(*this).<b><u>GetBlockManagerForRowData</u></b>(), types, 0);</font></div></div></div></div></foreignObject><text x="3687" y="3376" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/data_table.cpp...</text></switch></g></g></g><g data-cell-id="0rRjchkaSUUTLkPYM30E-13"><g><rect x="3690" y="3510" width="570" height="118" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 568px; height: 1px; padding-top: 3517px; margin-left: 3692px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/storage_manager.cpp: </div><div><br /></div><div><font color="#660000">SingleFileTableIOManager </font><span style="color: rgb(102, 0, 0); background-color: initial;">BlockManager &amp;</span><b style="color: rgb(102, 0, 0); background-color: initial;"><u>GetBlockManagerForRowData</u></b><span style="color: rgb(102, 0, 0); background-color: initial;">() override {</span></div><div><font color="#660000"><span style="white-space: pre;">	</span>return block_manager;</font></div><div><font color="#660000">}</font></div></div></div></div></foreignObject><text x="3692" y="3531" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/storage_manager.cpp:...</text></switch></g></g></g><g data-cell-id="0rRjchkaSUUTLkPYM30E-17"><g><path d="M 3975 3322 L 3975 3342 L 3975 3335 L 3975 3348.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 3975 3353.88 L 3971.5 3346.88 L 3975 3348.63 L 3978.5 3346.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="0rRjchkaSUUTLkPYM30E-16"><g><rect x="3685" y="3180" width="580" height="142" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 578px; height: 1px; padding-top: 3187px; margin-left: 3687px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">catalog/catalog_entry/duck_table_entry.cpp<div><br /></div><div><font color="#660000">DuckTableEntry::AddColumn</font></div><div><div><font color="#660000"><span style="white-space: pre;">	</span>auto <b>new_storage</b> = <span style="background-color: initial;">make_shared&lt;<b><u>DataTable</u></b>&gt;(context, *storage, info.new_column, <span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>*bound_create_info-&gt;bound_defaults.back());</span></font></div></div><div><span style="background-color: initial;"><font color="#660000"><span style="white-space: pre;">	</span>return make_uniq&lt;DuckTableEntry&gt;(catalog, schema, *bound_create_info, </font></span></div><div><span style="background-color: initial;"><font color="#660000"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>new_storage);</font><br /></span></div></div></div></div></foreignObject><text x="3687" y="3201" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">catalog/catalog_entry/duck_table_entry.cpp...</text></switch></g></g></g><g data-cell-id="hCfBpjkJYw5AOTarbrzr-1"><g><rect x="825" y="0" width="120" height="100" rx="15" ry="15" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 50px; margin-left: 826px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><font color="#006633">Query</font></div><div><font color="#994c00">Write</font></div><font color="#003366">InitializeScan</font><div><font color="#660000">compression_type</font></div><div><font color="#333300">sink</font></div></div></div></div></foreignObject><text x="885" y="54" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Query...</text></switch></g></g></g><g data-cell-id="hCfBpjkJYw5AOTarbrzr-5"><g><rect x="2160" y="910" width="525" height="160" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 523px; height: 1px; padding-top: 917px; margin-left: 2162px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>planner/planner.cpp</div><div><br /></div><div><span style="background-color: initial;"><font color="#006633"><div>Planner::Planner(ClientContext &amp;context) : </div><div><span style="white-space: pre;">	</span><b>binder</b>(Binder::CreateBinder(context)), context(context) {<span style="background-color: initial;">}</span></div></font></span></div><div><span style="background-color: initial;"><font color="#006633"><br /></font></span></div><div><span style="background-color: initial;"><font color="#006633">void Planner::<b><i>CreatePlan</i></b></font></span><span style="background-color: initial;"><font color="#006633"><i>(SQLStatement &amp;statement)</i></font></span><br /></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span>auto bound_statement = <b>binder</b>-&gt;<b><u>Bind</u></b>(statement);<br /></font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span>this-&gt;plan = std::move(bound_statement.plan);<br /></font></span></div></div></div></div></foreignObject><text x="2162" y="931" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">planner/planner.cpp...</text></switch></g></g></g><g data-cell-id="hCfBpjkJYw5AOTarbrzr-7"><g><rect x="2162.5" y="1090" width="512.5" height="540" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 511px; height: 1px; padding-top: 1097px; margin-left: 2165px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>planner/binder.cpp</div><div><br /></div><div><font color="#006633">Binder::<b><i>Bind</i></b><i>(SQLStatement &amp;statement)</i></font><br /></div><div><font color="#006633"><span style="white-space: pre;">	</span>case </font><span style="background-color: initial;"><font color="#006633">StatementType::SELECT_STATEMENT:</font></span></div><div><font color="#006633"><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>return <b><u>Bind</u></b>(statement.Cast&lt;SelectStatement&gt;());</font></div><div><font color="#006633"><br /></font></div><div><font color="#006633">Binder::<b><i style="">Bind</i></b><i>(QueryNode &amp;node)</i><br /></font></div><div><font color="#006633"><span style="white-space: pre;">	</span>auto bound_node = <b><u>BindNode</u></b>(node);<br /></font></div><div><font color="#006633"><div><span style="white-space: pre;">	</span>result.plan = <b><u>CreatePlan</u></b>(*bound_node);</div><div><span style="white-space: pre;">	</span>return result;</div><div><br /></div><div>Binder::<b><i>BindNode</i></b><i>(QueryNode &amp;node)</i><br /></div><div><div><span style="white-space: pre;">	</span>case QueryNodeType::SELECT_NODE:</div><div><span style="white-space: normal;"><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>result = <b><u>BindNode</u></b>(node.Cast&lt;SelectNode&gt;());</span></div><div><span style="white-space: normal;"><span style="white-space:pre"><span style="white-space: pre;">	</span>	</span>break;</span></div></div><div><br /></div><div><div>Binder::<b><i>Bind</i></b><i>(TableRef &amp;ref)</i><br /></div><div><div><span style="white-space: pre;">	</span>case TableReferenceType::BASE_TABLE:</div><div><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>result = <b><u>Bind</u></b>(ref.Cast&lt;BaseTableRef&gt;());</div><div><span style="white-space: pre;">	</span>return result;</div></div></div><div><br /></div><div>unique_ptr&lt;LogicalOperator&gt; Binder::<b><i>CreatePlan</i></b><i>(BoundQueryNode &amp;node)</i><br /></div><div><div><span style="white-space: pre;">	</span>case QueryNodeType::SELECT_NODE:</div><div><span style="white-space: normal;"><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>return <b><u>CreatePlan</u></b>(node.Cast&lt;BoundSelectNode&gt;());</span></div></div><div><span style="white-space: normal;"><br /></span></div><div>Binder::<b><i>CreatePlan</i></b><i>(BoundTableRef &amp;ref)</i><br /></div><div><div><span style="white-space: pre;">	</span>case TableReferenceType::BASE_TABLE:</div><div><span style="white-space: normal;"><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>root = CreatePlan(ref.Cast&lt;BoundBaseTableRef&gt;());</span></div></div><div><br /></div><div><br /></div></font></div></div></div></div></foreignObject><text x="2165" y="1111" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">planner/binder.cpp...</text></switch></g></g></g><g data-cell-id="hCfBpjkJYw5AOTarbrzr-9"><g><rect x="2187.5" y="1951" width="462.5" height="210" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 461px; height: 1px; padding-top: 1958px; margin-left: 2190px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>execution/physical_plan_generator.cpp</div><div><br /></div><div><font color="#006633">PhysicalPlanGenerator::<b><i>CreatePlan</i></b></font><span style="background-color: initial;"><font color="#006633">(unique_ptr&lt;LogicalOperator&gt; op)</font></span><br /></div><div><font color="#006633">resolver.VisitOperator(*op);</font></div><div><font color="#006633"><span style="white-space: pre;">	</span>op-&gt;ResolveOperatorTypes();<br /></font></div><div><span style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>auto plan = </span><b style="color: rgb(0, 102, 51);"><u>CreatePlan</u></b><span style="color: rgb(0, 102, 51);">(*op);</span><font color="#006633"><br /></font></div><div><span style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>return plan;</span></div><div><span style="color: rgb(0, 102, 51);"><br /></span></div><div><font color="#006633">PhysicalPlanGenerator::<b><i>CreatePlan</i></b></font><span style="background-color: initial;"><font color="#006633"><i style="">(LogicalOperator &amp;op)</i></font></span><br /></div><div><font color="#006633"><div><span style="white-space: pre;">	</span>case LogicalOperatorType::LOGICAL_GET:</div><div><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>plan = <b><u>CreatePlan</u></b>(op.Cast&lt;LogicalGet&gt;());</div><div><span style="white-space:pre"><span style="white-space: pre;">	</span>	</span>break;</div></font></div></div></div></div></foreignObject><text x="2190" y="1972" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">execution/physical_plan_generator.cpp...</text></switch></g></g></g><g data-cell-id="hCfBpjkJYw5AOTarbrzr-12"><g><rect x="2710" y="2130" width="650" height="590" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 648px; height: 1px; padding-top: 2137px; margin-left: 2712px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>execution/physical_plan/plan_get.cpp</div><div><br /></div><div><font color="#006633">PhysicalPlanGenerator::<b><i>CreatePlan</i></b></font><span style="background-color: initial;"><font color="#006633">(LogicalGet &amp;op)</font></span><br /></div><div><font color="#006633"><div><span style="white-space: pre;">	</span>unique_ptr&lt;TableFilterSet&gt; table_filters;</div><div><span style="white-space: pre;">	</span>if (!op.table_filters.filters.empty()) {</div><div><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>table_filters = CreateTableFilterSet(op.table_filters, op.column_ids);</div><div><span style="white-space: pre;">	</span>}</div><div><br /></div><div><div><span style="white-space: pre;">	</span>auto node = make_uniq&lt;<b><u>PhysicalTableScan</u></b>&gt;(op.returned_types, <b>op.function</b>, </div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>std::move(op.bind_data), <span style="background-color: initial;">op.returned_types, op.column_ids, </span></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>vector&lt;column_t&gt;(), op.names, </span><span style="background-color: initial;">std::move(table_filters), </span></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>op.estimated_cardinality, op.extra_info);</span></div></div><div><span style="white-space: pre;">	</span>// first check if an additional projection is necessary<br /></div><div><div><span style="white-space: pre;">	</span>// a projection is not necessary if all columns have been requested in-order</div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>// in that case we just return the node</span></div></div><div><br /></div><div><div><span style="white-space: pre;">	</span>// push a projection on top that does the projection</div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>vector&lt;LogicalType&gt; types;</span></div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>vector&lt;unique_ptr&lt;Expression&gt;&gt; expressions;</span></div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>for (auto &amp;column_id : op.column_ids) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>if (column_id == COLUMN_IDENTIFIER_ROW_ID) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		<span style="white-space: pre;">	</span></span>types.emplace_back(LogicalType::BIGINT);</span></div><div><span style="white-space: normal;"><span style="white-space:pre"><span style="white-space: pre;">	</span>		</span>expressions.push_back(make_uniq&lt;BoundConstantExpression&gt;(Value::BIGINT(0)));</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>} else {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		<span style="white-space: pre;">	</span></span>auto type = op.returned_types[column_id];</span></div><div><span style="white-space: normal;"><span style="white-space:pre"><span style="white-space: pre;">	</span>		</span>types.push_back(type);</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	<span style="white-space: pre;">	</span>	</span>expressions.push_back(make_uniq&lt;BoundReferenceExpression&gt;(type, column_id));</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>}</span></div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>}</span></div></div><div><br /></div><div><div><span style="white-space: pre;">	</span>auto projection = <span style="background-color: initial;">make_uniq&lt;<b><u>PhysicalProjection</u></b>&gt;(std::move(types), std::move(expressions), <span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>   op.estimated_cardinality);</span></div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>projection-&gt;children.push_back(std::move(node));</span></div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>return std::move(projection);</span></div></div></font></div></div></div></div></foreignObject><text x="2712" y="2151" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">execution/physical_plan/plan_get.cpp...</text></switch></g></g></g><g data-cell-id="hCfBpjkJYw5AOTarbrzr-13"><g><path d="M 2650 2056 L 2705.99 2125.05" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2709.3 2129.13 L 2702.17 2125.9 L 2705.99 2125.05 L 2707.61 2121.49 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-16"><g><path d="M 2715 1170 L 2650.53 1206.84" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2645.97 1209.45 L 2650.31 1202.93 L 2650.53 1206.84 L 2653.78 1209.01 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-1"><g><rect x="2715" y="1060" width="540" height="110" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 538px; height: 1px; padding-top: 1067px; margin-left: 2717px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>planner/binder/statement/bind_select.cpp</div><div><br /></div><div><font color="#006633"><div style="">BoundStatement Binder::<b><i>Bind</i></b><i>(SelectStatement &amp;stmt)</i></div><div style=""><span style="white-space: pre;">	</span>properties.allow_stream_result = true;</div><div style=""><span style="white-space: pre;">	</span>properties.return_type = StatementReturnType::QUERY_RESULT;</div><div style=""><span style="white-space: pre;">	</span>return <b><u>Bind</u></b>(*stmt.node);</div></font></div></div></div></div></foreignObject><text x="2717" y="1081" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">planner/binder/statement/bind_select.cpp...</text></switch></g></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-11"><g><path d="M 980 2030 L 980 2065.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 980 2070.88 L 976.5 2063.88 L 980 2065.63 L 983.5 2063.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-3"><g><rect x="620" y="890" width="720" height="1140" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 718px; height: 1px; padding-top: 897px; margin-left: 622px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>parallel/executor.cpp</div><div><br /></div><div><font color="#006633">Executor::<i><b>Initialize</b>(<u>PhysicalOperator</u> &amp;plan)</i></font><br /></div><div><font color="#006633"><b><u><span style="white-space: pre;">	</span>InitializeInternal</u></b>(plan);<br /></font></div><div><font color="#006633"><br /></font></div><div><font color="#006633">Executor::<b><i>InitializeInternal</i></b>(PhysicalOperator &amp;plan)<br /></font></div><div><font color="#006633"><div><span style="white-space: pre;">	</span>PipelineBuildState state;</div><div><span style="white-space: pre;">	</span>auto root_pipeline = make_shared&lt;<u><b>MetaPipeline</b></u>&gt;(*this, state, nullptr);</div><div><span style="white-space: pre;">	</span>root_pipeline-&gt;<b><u>Build</u></b>(*physical_plan);</div><div><span style="white-space: pre;">	</span>root_pipeline-&gt;Ready();</div><div><br /></div><div><div><span style="white-space: pre;">	</span>// collect all meta-pipelines from the root pipeline</div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>vector&lt;shared_ptr&lt;MetaPipeline&gt;&gt; <b>to_schedule</b>;</span></div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>root_pipeline-&gt;GetMetaPipelines(to_schedule, true, true);</span></div></div><div><span style="white-space: normal;"><br /></span></div><div><div style=""><span style="white-space: pre;">	</span>// finally, verify and schedule</div><div style=""><span style="white-space: normal;"><span style="white-space: pre;">	</span>VerifyPipelines();</span></div><div style=""><span style="white-space: normal;"><b><u><span style="white-space: pre;">	</span>ScheduleEvents</u></b>(to_schedule);</span></div></div><div style=""><span style="white-space: normal;"><br /></span></div><div style=""><div style="white-space: normal;">Executor::<b><i>ScheduleEvents</i></b>(const <u>vector&lt;shared_ptr&lt;MetaPipeline&gt;&gt;</u> &amp;meta_pipelines)</div><div style="white-space: normal;"><u><span style="white-space: pre;">	</span>ScheduleEventData event_data(meta_pipelines, events, true);</u></div><div style="white-space: normal;"><b><u><span style="white-space: pre;">	</span>ScheduleEventsInternal</u></b>(event_data);</div><div style="white-space: normal;"><br /></div><div style="">Executor::<b><i>ScheduleEventsInternal</i></b>(ScheduleEventData &amp;event_data)<br /></div><div style=""><div><span style="white-space: pre;">	</span>// create all the required pipeline events</div><div><span style="white-space: pre;">	</span>for (auto &amp;pipeline : event_data.meta_pipelines) {</div><div><span style="white-space:pre">	<span style="white-space: pre;">	</span></span><b><u>SchedulePipeline</u></b>(pipeline, event_data);</div><div><span style="white-space: pre;">	</span>}</div><div><br /></div><div><span style="background-color: initial;">Executor::<b>SchedulePipeline</b>(const shared_ptr&lt;MetaPipeline&gt; &amp;meta_pipeline,</span></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>ScheduleEventData &amp;event_data)</span><span style="background-color: initial; white-space: pre;">	</span></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span>// create events/stack for the <u>base pipeline &amp; push to events</u>...</span></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span>// add dependencies into base pipeline: init -&gt; event -&gt; finish -&gt; complete...<br /></span></div><div><span style="background-color: initial;"><u><span style="white-space: pre;">	</span>// create an event and stack for all pipelines in the MetaPipeline...</u></span></div><div><span style="background-color: initial;"><span style="white-space: pre;"><span style="white-space: pre;">	</span></span></span><span style="background-color: initial; white-space: pre;">for (idx_t i = 1; i &lt; pipelines.size(); i++) { // loop starts at 1 because 0 is the base pipeline</span></div><div><span style="background-color: initial; white-space: pre;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><br /></span><span style="background-color: initial; white-space: pre;">auto finish_group = meta_pipeline-&gt;GetFinishGroup(*pipeline);<br />		if (finish_group) {<br />			// this pipeline is part of a finish group<br />			const auto group_entry = event_map.find(*finish_group.get());<br />			auto &amp;group_stack = group_entry-&gt;second;<br />			PipelineEventStack <u>pipeline_stack</u>(base_stack.pipeline_initialize_event, *pipeline_event,<br />			                                  group_stack.pipeline_finish_event, base_stack.pipeline_complete_event);<br /><br />			// dependencies: base_finish -&gt; pipeline_event -&gt; group_finish<br />			pipeline_stack.pipeline_event.<b>AddDependency</b>(base_stack.pipeline_finish_event);<br />			group_stack.pipeline_finish_event.<b>AddDependency</b>(pipeline_stack.pipeline_event);</span></div><div><br /></div><div><br /></div><div><span style="background-color: initial;">PendingExecutionResult Executor::<b><i>ExecuteTask</i></b>(bool dry_run) {</span></div><div><span style="background-color: initial;"><div><span style="white-space:pre">	</span>auto &amp;scheduler = TaskScheduler::GetScheduler(context);</div><div><span style="white-space:pre">	</span>while (completed_pipelines &lt; total_pipelines) {</div><div><span style="white-space:pre">		</span>// there are! if we don't already have a task, fetch one</div><div><span style="white-space:pre">		</span>auto current_task = task.get();</div><div><span style="white-space:pre">		</span>if (dry_run) {</div><div><span style="white-space:pre">			</span>// Pretend we have no task, we don't want to execute anything</div><div><span style="white-space:pre">			</span>current_task = nullptr;</div><div><span style="white-space:pre">		</span>} else {</div><div><span style="white-space:pre">			</span>if (!<u>task</u>) {</div><div><u><span style="white-space:pre">				</span>scheduler.<b>GetTaskFromProducer</b>(*producer, task);</u></div><div><span style="white-space:pre">			</span>}</div><div><u><span style="white-space:pre">			</span>current_task = task.get();</u></div><div><span style="white-space:pre">		</span>}</div><div><span style="white-space: pre;">	</span>if (current_task) {<br /></div></span></div><div><span style="background-color: initial; white-space: pre;"><span style="white-space: pre;">	</span>	</span><span style="background-color: initial;">auto result = task-&gt;</span><b style="background-color: initial;"><u>Execute</u></b><span style="background-color: initial;">(TaskExecutionMode::PROCESS_PARTIAL);</span><br /></div><div><div><br /></div></div></div></div></font></div></div></div></div></foreignObject><text x="622" y="911" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">parallel/executor.cpp...</text></switch></g></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-9"><g><path d="M 980 2152 L 980 2183.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 980 2188.88 L 976.5 2181.88 L 980 2183.63 L 983.5 2181.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-5"><g><rect x="760" y="2072" width="440" height="80" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 438px; height: 1px; padding-top: 2079px; margin-left: 762px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>parallel/executor_task.cpp</div><div><br /></div><div><font color="#006633">ExecutorTask::<b><i>Execute</i></b>(TaskExecutionMode mode)</font><br /></div><div><font color="#006633"><span style="white-space: pre;">	</span>return <b><u>ExecuteTask</u></b>(mode);<br /></font></div></div></div></div></foreignObject><text x="762" y="2093" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">parallel/executor_task.cpp...</text></switch></g></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-8"><g><rect x="660" y="2190" width="640" height="427" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 638px; height: 1px; padding-top: 2197px; margin-left: 662px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>parallel/pipeline.cpp</div><div><br /></div><div><font color="#006633"><div>class PipelineTask : public ExecutorTask {</div><div><span style="white-space:pre">	</span>static constexpr const idx_t PARTIAL_CHUNK_COUNT = 50;</div><div>public:</div><div><span style="white-space:pre">	</span>explicit PipelineTask(Pipeline &amp;pipeline_p, shared_ptr&lt;Event&gt; event_p);</div><div><span style="white-space:pre">	</span>Pipeline &amp;pipeline;</div><div><span style="white-space:pre">	</span>unique_ptr&lt;PipelineExecutor&gt; <u>pipeline_executor</u>;</div><div><br /></div></font></div><div><font color="#006633">TaskExecutionResult PipelineTask::ExecuteTask(TaskExecutionMode mode) {</font><br /></div><div><font color="#006633"><span style="white-space: pre;">	</span></font><span style="background-color: initial;"><font color="#006633">if (!pipeline_executor) {<br />		<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><u>pipeline_executor = make_uniq&lt;PipelineExecutor&gt;(pipeline.GetClientContext(), pipeline);</u><br />	<span style="white-space: pre;">	</span>}</font></span></div><div><font color="#006633"><span style="white-space: pre;">	</span>auto res = pipeline_executor-&gt;<b><u>Execute</u></b>(PARTIAL_CHUNK_COUNT);<br /></font></div><div><font color="#006633"><br /></font></div><div><font color="#006633"><div>void Pipeline::<i><b>AddDependency</b>(shared_ptr&lt;Pipeline&gt; &amp;pipeline) {</i></div><div><span style="white-space:pre">	</span>D_ASSERT(pipeline);</div><div><span style="white-space:pre">	</span>dependencies.push_back(weak_ptr&lt;Pipeline&gt;(pipeline));</div><div><span style="white-space:pre">	</span>pipeline-&gt;parents.push_back(weak_ptr&lt;Pipeline&gt;(shared_from_this()));</div><div>}</div><div><br /></div><div><div style="color: rgb(0, 0, 0);"><span style="color: rgb(0, 102, 51); background-color: initial;">void PipelineBuildState::<i><b>AddPipelineOperator</b>(Pipeline &amp;pipeline, </i></span><i style="background-color: initial; color: rgb(0, 102, 51);">PhysicalOperator &amp;op) </i><span style="background-color: initial; color: rgb(0, 102, 51);">{</span></div><div style="color: rgb(0, 0, 0);"><div><font color="#006633"><span style="white-space: pre;">	</span>pipeline.operators.push_back(op);</font></div><div><font color="#006633">}</font></div></div></div></font></div></div></div></div></foreignObject><text x="662" y="2211" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">parallel/pipeline.cpp...</text></switch></g></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-10"><g><rect x="555" y="2730" width="890" height="2190" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 888px; height: 1px; padding-top: 2737px; margin-left: 557px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>parallel/pipeline_executor.cpp</div><div><br /></div><div><span style="background-color: initial;"><font color="#006633">PipelineExecuteResult PipelineExecutor::<b><i>Execute</i></b>(idx_t max_chunks)</font></span></div><div><span style="background-color: initial;"><font color="#006633"><div><span style="white-space: pre;">	</span>D_ASSERT(pipeline.sink);</div><div><span style="white-space:pre">	</span>auto &amp;source_chunk = pipeline.operators.empty() ? final_chunk : *intermediate_chunks[0];</div><div><span style="white-space:pre">	</span>for (idx_t i = 0; i &lt; max_chunks; i++) {</div><div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>OperatorResultType result;</div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>if (<u>exhausted_source &amp;&amp; done_flushing &amp;&amp; !remaining_sink_chunk &amp;&amp; !next_batch_blocked &amp;&amp; </u></span><span style="background-color: initial;"><u>in_process_operators.empty()</u>) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">			</span><b>break</b>;</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>} else if (remaining_sink_chunk) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">			</span><u>// The pipeline was interrupted by the Sink. We should retry sinking the final chunk.</u></span></div><div><span style="white-space: normal;"><span style="white-space:pre">			</span>result = <b><u>ExecutePushInternal</u></b>(final_chunk);</span></div><div><span style="white-space: normal;"><span style="white-space:pre">			</span>remaining_sink_chunk = false;</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>} else if (!in_process_operators.empty() &amp;&amp; !started_flushing) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">			</span>// The pipeline was interrupted by the Sink when pushing a source chunk through the pipeline. <u>We need to</u></span></div><div><span style="white-space: normal;"><u><span style="white-space:pre">			</span>// re-push the same source chunk through the pipeline because there are in_process opera</u>tors, meaning that</span></div><div><span style="white-space: normal;"><span style="white-space:pre">			</span>// the result for the pipeline</span></div><div><span style="white-space: normal;"><span style="white-space:pre">			</span>D_ASSERT(source_chunk.size() &gt; 0);</span></div><div><span style="white-space: normal;"><span style="white-space:pre">			</span>result = <b><u>ExecutePushInternal</u></b>(source_chunk);</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>} else if (exhausted_source &amp;&amp; !next_batch_blocked &amp;&amp; !done_flushing) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">			</span>// <u>The source was exhausted, try flushing all operators</u></span></div><div><span style="white-space: normal;"><span style="white-space:pre">			</span>auto flush_completed = TryFlushCachingOperators();</span></div><div><span style="white-space: normal;"><span style="white-space:pre">			</span>if (flush_completed) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">				</span>done_flushing = true;</span></div><div><span style="white-space: normal;"><span style="white-space:pre">				</span>break;</span></div><div><span style="white-space: normal;"><span style="white-space:pre">			</span>} else {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">				</span><u>return PipelineExecuteResult::INTERRUPTED;</u></span></div><div><span style="white-space: normal;"><span style="white-space:pre">			</span>}</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>} else if (!exhausted_source || next_batch_blocked) {</span></div></div></font></span></div><div><span style="background-color: initial;"><font color="#006633">			<span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>SourceResultType source_result;</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>if (!next_batch_blocked) {</font></span></div><div><div><font color="#006633"><span style="white-space: pre;">	<span style="white-space: pre;">	<span style="white-space: pre;">	<span style="white-space: pre;">	</span></span></span></span><u>// "Regular" path: fetch a chunk from the source and push it through the pipeline</u></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space: pre;">	<span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span></span>source_chunk.Reset();</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space: pre;">	<span style="white-space: pre;">	<span style="white-space: pre;">	<span style="white-space: pre;">	</span></span></span></span>source_result = <b><u>FetchFromSource</u></b>(source_chunk);</span></font></div></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span></span></font><span style="background-color: initial;"><font color="#006633">if (source_result == SourceResultType::BLOCKED) {</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span><u>return PipelineExecuteResult::INTERRUPTED;</u><br />				<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>}<br />				<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>if (source_result == SourceResultType::FINISHED) {<br />					<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>exhausted_source = true;<br />				<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>}<br />			<span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>}</font></span></div><div><span style="background-color: initial;"><font color="#006633"><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>if (requires_batch_index) {</div><div><span style="white-space:pre">				</span>auto next_batch_result = NextBatch(source_chunk);</div><div><span style="white-space:pre">				</span>next_batch_blocked = next_batch_result == SinkNextBatchType::BLOCKED;</div><div><span style="white-space:pre">				</span>if (next_batch_blocked) {</div><div><span style="white-space:pre">					</span><u>return PipelineExecuteResult::INTERRUPTED;</u></div><div><span style="white-space:pre">				</span>}</div><div><span style="white-space:pre">			</span>}</div><div><br /></div><div><span style="white-space:pre">			</span>if (exhausted_source &amp;&amp; source_chunk.size() == 0) {</div><div><span style="white-space:pre">				</span>// To ensure that we're not early-terminating the pipeline</div><div><span style="white-space:pre">				</span>continue;</div><div><span style="white-space:pre">			</span>}</div></font></span></div><div><span style="background-color: initial;"><font color="#006633"><br /></font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span></font></span><span style="background-color: initial;"><font color="#006633">result = <b><u>ExecutePushInternal</u></b>(source_chunk);</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>} </font></span><font color="#006633"><span style="background-color: initial;">else {</span><span style="background-color: initial;"><br /></span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">			</span>throw InternalException("Unexpected state reached in pipeline executor");</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>}</span></font></div><div><span style="background-color: initial;"><font color="#006633"><br /></font></span></div><div><span style="background-color: initial;"><font color="#006633"><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>// SINK INTERRUPT</div><div><span style="white-space:pre">		</span>if (result == OperatorResultType::BLOCKED) {</div><div><span style="white-space:pre">			</span>remaining_sink_chunk = true;</div><div><u><span style="white-space: pre;">			</span>return PipelineExecuteResult::INTERRUPTED;</u></div><div><span style="white-space:pre">		</span>}</div><div><br /></div><div><span style="white-space:pre">		</span>if (result == OperatorResultType::FINISHED) {</div><div><u><span style="white-space: pre;">			</span>break;</u></div><div><span style="white-space:pre">		</span>}</div><div><span style="white-space:pre">	</span>}</div><div><br /></div><div><span style="white-space:pre">	</span>if ((!exhausted_source || !done_flushing) &amp;&amp; !IsFinished()) {</div><div><span style="white-space:pre">		</span>r<u>eturn PipelineExecuteResult::NOT_FINISHED;</u></div><div><span style="white-space:pre">	</span>}</div></font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span>return <b><u>PushFinalize</u></b>();<br /></font></span></div><div><span style="background-color: initial;"><font color="#006633"><br /></font></span></div><div><span style="background-color: initial;"><font color="#006633">OperatorResultType PipelineExecutor::<b><i>ExecutePushInternal</i></b><i>(DataChunk &amp;input, idx_t initial_idx) {</i><br /></font></span></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space: pre;">	</span></span></font><span style="background-color: initial;"><font color="#006633">// this loop will continuously push the input chunk through the pipeline as long as:<br />	<span style="white-space: pre;">	</span>// - the OperatorResultType for the Execute is <span style="white-space: pre;">	</span>HAVE_MORE_OUTPUT<br />	<span style="white-space: pre;">	</span>// - the Sink doesn't block </font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span>while (true) { </font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>OperatorResultType result;</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>// Note: if input is the final_chunk, we don't do any executing, the chunk just needs to be sinked</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>if (&amp;input != &amp;final_chunk) {</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>final_chunk.Reset();<br />			<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>result = <b><u>Execute</u></b>(input, final_chunk, initial_idx);</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span></span>if (result == OperatorResultType::FINISHED) {<br />				<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>return OperatorResultType::FINISHED;<br />			<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>}</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>} else {<br /></font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>result = OperatorResultType::NEED_MORE_INPUT;<br /></font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>}<br /></font></span></div><div><span style="background-color: initial;"><div style=""><span style="color: rgb(0, 102, 51); white-space: pre;">	</span><span style="color: rgb(0, 102, 51); white-space: pre;">	</span><font color="#333300">auto &amp;sink_chunk = final_chunk;</font></div><div style=""><font color="#333300"><span style="white-space:pre">		</span>if (sink_chunk.size() &gt; 0) {</font></div><div style=""><font color="#333300"><span style="white-space:pre">			</span>StartOperator(*pipeline.sink);</font></div><div style=""><font color="#333300"><span style="white-space:pre">			</span>D_ASSERT(pipeline.sink);</font></div><div style=""><font color="#333300"><span style="white-space:pre">			</span>D_ASSERT(pipeline.sink-&gt;sink_state);</font></div><div style=""><font color="#333300"><span style="white-space:pre">			</span>OperatorSinkInput sink_input {*pipeline.sink-&gt;sink_state, *local_sink_state, interrupt_state};</font></div><div style=""><font color="#333300"><br /></font></div><div style=""><font color="#333300"><span style="white-space:pre">			</span>auto sink_result = <b>Sink</b>(sink_chunk, sink_input);</font></div><div style=""><font color="#333300"><br /></font></div><div style=""><font color="#333300"><span style="white-space:pre">			</span>EndOperator(*pipeline.sink, nullptr);</font></div><div style=""><font color="#333300"><br /></font></div><div style=""><font color="#333300"><span style="white-space:pre">			</span>if (sink_result == SinkResultType::BLOCKED) {</font></div><div style=""><font color="#333300"><span style="white-space:pre">				</span>return OperatorResultType::BLOCKED;</font></div><div style=""><font color="#333300"><span style="white-space:pre">			</span>} else if (sink_result == SinkResultType::FINISHED) {</font></div><div style=""><font color="#333300"><span style="white-space:pre">				</span>FinishProcessing();</font></div><div style=""><font color="#333300"><span style="white-space:pre">				</span>return OperatorResultType::FINISHED;</font></div><div style=""><font color="#333300"><span style="white-space:pre">			</span>}</font></div><div style=""><font color="#333300"><span style="white-space: pre;">		</span>}</font></div></span></div><div><font color="#006633"><span style="white-space: normal;"><br /></span></font></div><div><font color="#006633">PipelineExecuteResult PipelineExecutor::<b><i>PushFinalize() {</i></b><br /></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space: pre;">	</span></span></font><span style="background-color: initial;"><font color="#006633">auto result = pipeline.sink-&gt;Combine(context, combine_input);</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span>// ...<br /></font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span></font></span><span style="background-color: initial;"><font color="#006633">finalized = true;<br />	<span style="white-space: pre;">	</span>// flush all query profiler info</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span>for (idx_t i = 0; i &lt; intermediate_states.size(); i++) {</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>intermediate_states[i]-&gt;<b><u>Finalize</u></b>(pipeline.operators[i].get(), context);<br />	<span style="white-space: pre;">	</span>}<br />	<span style="white-space: pre;">	</span>pipeline.executor.Flush(thread);<br />	<span style="white-space: pre;">	</span>local_sink_state.reset();</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span></font></span><span style="background-color: initial;"><font color="#006633">return PipelineExecuteResult::FINISHED;</font></span></div><div><span style="background-color: initial;"><font color="#006633">}<br /></font></span></div><div><font color="#006633"><span style="white-space: normal;"><br /></span></font></div><div><font color="#006633">SourceResultType PipelineExecutor::<b><i>FetchFromSource</i></b>(DataChunk &amp;result)<br /></font></div><div><font color="#006633"><span style="white-space: pre;">	</span>auto res = <b><u>GetData</u></b>(result, source_input);<br /></font></div><div><font color="#006633"><br /></font></div><div><font color="#006633">SourceResultType PipelineExecutor::<b><i>GetData</i></b>(DataChunk &amp;chunk, </font><span style="color: rgb(0, 102, 51); background-color: initial;">OperatorSourceInput &amp;input)</span></div><div><font color="#006633"><span style="white-space: pre;">	</span>return pipeline.source-&gt;<b><u>GetData</u></b>(context, chunk, input);  // source: &lt;Physical Operator&gt;<br /></font></div></div></div></div></foreignObject><text x="557" y="2751" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">parallel/pipeline_executor.cpp...</text></switch></g></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-18"><g><path d="M 2715 1500 L 2650.36 1541.56" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2645.94 1544.4 L 2649.94 1537.67 L 2650.36 1541.56 L 2653.72 1543.55 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-15"><g><rect x="2715" y="1350" width="640" height="200" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 638px; height: 1px; padding-top: 1357px; margin-left: 2717px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>planner/binder/query_node/plan_select_node.cpp</div><div><br /></div><div><font color="#006633"><div style="">unique_ptr&lt;LogicalOperator&gt; Binder::<b><i>CreatePlan</i></b>(BoundSelectNode &amp;statement)<br /></div><div style=""><span style="white-space: pre;">	</span>root = <b><u>CreatePlan</u></b>(*statement.from_table);</div><div style=""><span style="white-space: pre;">	</span>// Plans filter, subqueries, aggregates etc etc</div><div style=""><span style="background-color: initial;"><span style="white-space: pre;">	</span>auto proj = make_uniq&lt;LogicalProjection&gt;(statement.projection_index, </span></div><div style=""><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>    std::move(statement.select_list));<br /></span><span style="background-color: initial;"><span style="white-space: pre;">	</span>auto &amp;projection = *proj;</span><span style="background-color: initial;"><br /></span></div><div style=""><span style="background-color: initial;"><span style="white-space: pre;">	</span>proj-<span style="white-space: pre;">	</span>&gt;AddChild(std::move(root));<br />	<span style="white-space: pre;">	</span>root = std::move(proj);</span><br /></div><div style=""><span style="background-color: initial;"><span style="white-space: pre;">	</span>return root<br /></span></div></font></div></div></div></div></foreignObject><text x="2717" y="1371" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">planner/binder/query_node/plan_select_node.cpp...</text></switch></g></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-23"><g><path d="M 2715 1295 L 2648.65 1389.78" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2645.64 1394.08 L 2646.79 1386.34 L 2648.65 1389.78 L 2652.52 1390.36 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-19"><g><rect x="2715" y="1190" width="540" height="140" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 538px; height: 1px; padding-top: 1197px; margin-left: 2717px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>planner/binder/query_node/bind_select_node.cpp</div><div><br /></div><div><font color="#006633"><div style="">unique_ptr&lt;BoundQueryNode&gt; Binder::<b><i>BindNode</i></b><i>(SelectNode &amp;statement)</i><br /></div><div style=""><div><span style="white-space: pre;">	</span>// first bind the FROM table statement</div><div><span style="white-space: pre;">	</span>auto from = std::move(statement.from_table);</div><div><span style="white-space: pre;">	</span>auto from_table = <b><u>Bind</u></b>(*from);</div><div><span style="white-space: pre;">	</span>return <u>BindSelectNode</u>(statement, std::move(from_table));</div></div></font></div></div></div></div></foreignObject><text x="2717" y="1211" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">planner/binder/query_node/bind_select_node.cpp...</text></switch></g></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-24"><g><rect x="2715" y="1580" width="640" height="520" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 638px; height: 1px; padding-top: 1587px; margin-left: 2717px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>planner/binder/tableref/bind_basetableref.cpp</div><div><br /></div><div>(include/duckdb/planner/binder.hpp)</div><div><font color="#006633"><div style="">class Binder :  public enable_shared_from_this&lt;Binder&gt; {</div><div style="">public:</div><div style=""><span style="white-space: pre;">	</span>ClientContext &amp;<b>context</b>  // ...<br /></div><div style="">}</div><div style=""><br /></div><div style="">Binder::<b><i>Bind</i></b><i>(BaseTableRef &amp;ref)</i><br /></div><div style=""><span style="white-space: pre;">	</span>// CTE handling etc...<br /></div><div style=""><div><span style="white-space: pre;">	</span>auto table_or_view = Catalog::GetEntry(context, CatalogType::TABLE_ENTRY, </div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>ref.catalog_name, ref.schema_name,</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>ref.table_name, OnEntryNotFound::RETURN_NULL, </div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>error_context);</div></div><div style=""><div><span style="white-space: pre;">	</span>switch (table_or_view-&gt;type) {</div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>case CatalogType::TABLE_ENTRY: {</span></div><div><span style="white-space: normal;"><span style="white-space:pre"><span style="white-space: pre;">	</span>	</span>// base table: create the BoundBaseTableRef node</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>auto table_index = GenerateTableIndex();</span></div><div><span style="white-space: normal;"><span style="white-space:pre"><span style="white-space: pre;">	</span>	</span>auto &amp;table = table_or_view-&gt;Cast&lt;TableCatalogEntry&gt;();</span></div><div><br /></div><div><span style="white-space: normal;"><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>unique_ptr&lt;FunctionData&gt; bind_data;</span></div><div><span style="white-space: normal;"><span style="white-space:pre"><span style="white-space: pre;">	</span>	</span>auto <b style="">scan_function</b> = table.<b><u>GetScanFunction</u></b>(<b>context</b>, bind_data);</span></div><div><span style="white-space: normal;"><br /></span></div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>auto logical_get = make_uniq&lt;LogicalGet&gt;(table_index, <u>scan_function</u>, std::move(bind_data), </span></div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	 </span>     std::move(return_types), std::move(return_names));<br /><span style="white-space: pre;">	</span>bind_context.AddBaseTable(table_index, alias, table_names, table_types,</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>      logical_get-&gt;column_ids, logical_get-&gt;GetTable().get());<br /><span style="white-space: pre;">	</span>return make_uniq_base&lt;BoundTableRef, BoundBaseTableRef&gt;(table, std::move(logical_get));</div></div></font></div></div></div></div></foreignObject><text x="2717" y="1601" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">planner/binder/tableref/bind_basetableref.cpp...</text></switch></g></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-36"><g><path d="M 2645 1475 L 2709 1452.14" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2713.95 1450.38 L 2708.53 1456.03 L 2709 1452.14 L 2706.18 1449.43 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-26"><g><rect x="2162.5" y="1350" width="482.5" height="90" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-29"><g><path d="M 2645 1172.5 L 2710.08 1119.04" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2714.14 1115.71 L 2710.95 1122.86 L 2710.08 1119.04 L 2706.51 1117.45 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-27"><g><rect x="2162.5" y="1120" width="482.5" height="70" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-19"><g><path d="M 2162.5 1230 L 2145 1230 L 2145 1475 L 2156.13 1475" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2161.38 1475 L 2154.38 1478.5 L 2156.13 1475 L 2154.38 1471.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-30"><g><rect x="2162.5" y="1190" width="482.5" height="80" fill="none" stroke="rgb(0, 0, 0)" stroke-width="2" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-32"><g><path d="M 2645 1310 L 2710.95 1229.92" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2714.29 1225.86 L 2712.54 1233.49 L 2710.95 1229.92 L 2707.14 1229.04 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-31"><g><rect x="2162.5" y="1270" width="482.5" height="80" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-35"><g><path d="M 2645 1395 L 2713.62 1703.78" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2714.76 1708.91 L 2709.82 1702.83 L 2713.62 1703.78 L 2716.66 1701.32 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-33"><g><rect x="2162.5" y="1510" width="482.5" height="70" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-34"><g><rect x="2162.5" y="1440" width="482.5" height="70" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-1"><g><rect x="1655" y="2810" width="790" height="730" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 788px; height: 1px; padding-top: 2817px; margin-left: 1657px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>include/duckdb/execution/physical_operator.hpp</div><div><br /></div><div><font color="#006633">class PhysicalOperator {</font></div><div><font color="#006633">public:</font></div><div><font color="#006633"><span style="white-space: pre;">	</span>// Source interface<br /></font></div><div><font color="#006633"><span style="white-space: pre;">	</span></font><span style="background-color: initial;"><font color="#006633">virtual SourceResultType GetData(ExecutionContext &amp;context, DataChunk &amp;chunk, OperatorSourceInput &amp;input) const;</font></span></div><div><font color="#006633"><br /></font></div><div><br /></div><div>execution/physical_operator.cpp</div><div><br /></div><div><font color="#006633">void PhysicalOperator::<b><i>BuildPipelines</i></b>(Pipeline &amp;current, MetaPipeline &amp;meta_pipeline) {</font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>op_state.reset();</span></font></div><div><font color="#006633"><br /></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>auto &amp;state = meta_pipeline.GetState();</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>if (IsSink()) {</span></font></div><div><font color="#006633"><span style="white-space: normal;"><u><span style="white-space:pre">		</span>// operator is a sink, build a pipeline</u></span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>sink_state.reset();</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>D_ASSERT(children.size() == 1);</span></font></div><div><font color="#006633"><br /></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>// single operator: the operator becomes the data source of the current pipeline</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>state.SetPipelineSource(current, *this);</span></font></div><div><font color="#006633"><br /></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>// we create a new pipeline starting from the child</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>auto &amp;child_meta_pipeline = meta_pipeline.<b><u>CreateChildMetaPipeline</u></b>(current, *this);</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>child_meta_pipeline.<b><u>Build</u></b>(*children[0]);</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>} else {</span></font></div><div><font color="#006633"><span style="white-space: normal;"><u><span style="white-space:pre">		</span>// operator is not a sink! recurse in children</u></span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>if (children.empty()) {</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">			</span>// source</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">			</span>state.SetPipelineSource(current, *this);</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>} else {</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">			</span>if (children.size() != 1) {</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">				</span>throw InternalException("Operator not supported in BuildPipelines");</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">			</span>}</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">			</span>state.<b><u>AddPipelineOperator</u></b>(current, *this);</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">			</span>children[0]-&gt;BuildPipelines(current, meta_pipeline);</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>}</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>}</span></font></div><div><span style="background-color: initial;"><font color="#006633">}</font></span></div><div><font color="#006633"><div style=""><div><span style="white-space: normal;"><br /></span></div><div><div style="color: rgb(0, 0, 0);"><br /></div></div><div style=""><span style="background-color: initial;"><div>}</div></span></div><div style="color: rgb(0, 0, 0);"><b style="color: rgb(0, 102, 51);"><br /></b></div></div></font></div></div></div></div></foreignObject><text x="1657" y="2831" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">include/duckdb/execution/physical_operator.hpp...</text></switch></g></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-6"><g><path d="M 3695 1430 L 3695 1463.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 3695 1468.88 L 3691.5 1461.88 L 3695 1463.63 L 3698.5 1461.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-3"><g><rect x="3405" y="1310" width="580" height="120" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 578px; height: 1px; padding-top: 1317px; margin-left: 3407px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>catalog/catalog_entry/duck_table_entry.cpp</div><div><br /></div><div><font color="#006633"><div style="">TableFunction DuckTableEntry::<b><i>GetScanFunction</i></b><span style="background-color: initial;"><i style="">(ClientContext &amp;context,</i></span></div><div style=""><span style="background-color: initial;"><i style=""><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>unique_ptr&lt;FunctionData&gt; &amp;bind_data)</i></span><br /></div><div style=""><div><span style="white-space: pre;">	</span>bind_data = make_uniq&lt;TableScanBindData&gt;(*this);</div><div><span style="white-space: pre;">	</span>return TableScanFunction::<b><u>GetFunction</u></b>();</div></div></font></div></div></div></div></foreignObject><text x="3407" y="1331" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">catalog/catalog_entry/duck_table_entry.cpp...</text></switch></g></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-8"><g><path d="M 3985 1890 L 4024.14 1601.31" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4024.85 1596.11 L 4027.38 1603.51 L 4024.14 1601.31 L 4020.44 1602.57 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-5"><g><rect x="3405" y="1470" width="580" height="560" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 578px; height: 1px; padding-top: 1477px; margin-left: 3407px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>function/table/table_scan.cpp</div><div><br /></div><div><div style=""><div style="color: rgb(0, 102, 51);">TableFunction TableScanFunction::<i style=""><b>GetFunction</b>()</i></div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>TableFunction scan_function("seq_scan", {}, <b><u>TableScanFunc</u></b>);</div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>scan_function.init_local = <b><u>TableScanInitLocal</u></b>;</div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>scan_function.init_global = <b><u>TableScanInitGlobal</u></b>;</div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>// ... more</div><div style="color: rgb(0, 102, 51);"><br /></div><div style="color: rgb(0, 102, 51);">static void <b><i>TableScanFunc</i></b><i>(ClientContext &amp;context, TableFunctionInput &amp;data_p, <span style="white-space: pre;">	<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span> </span>    DataChunk &amp;output)</i></div><div style="color: rgb(0, 102, 51);"><span style="background-color: initial;"><span style="white-space: pre;">	</span></span><span style="background-color: initial;">auto &amp;bind_data = data_p.bind_data-&gt;Cast&lt;TableScanBindData&gt;();</span></div><div style="color: rgb(0, 102, 51);"><span style="white-space: normal;"><span style="white-space:pre">	</span>auto &amp;gstate = data_p.global_state-&gt;Cast&lt;TableScanGlobalState&gt;();</span></div><div style="color: rgb(0, 102, 51);"><span style="white-space: normal;"><span style="white-space:pre">	</span>auto &amp;state = data_p.local_state-&gt;Cast&lt;TableScanLocalState&gt;();</span></div><div style="color: rgb(0, 102, 51);"><span style="white-space: normal;"><span style="white-space:pre">	</span>auto &amp;transaction = DuckTransaction::Get(context, bind_data.table.catalog);</span></div><div style="color: rgb(0, 102, 51);"><span style="white-space: normal;"><span style="white-space:pre">	</span>auto &amp;storage = bind_data.table.GetStorage();</span></div><div style="color: rgb(0, 102, 51);"><span style="white-space: normal;"><br /></span></div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>storage.<b><u>Scan</u></b>(transaction, output, state.scan_state);</div><div style="color: rgb(0, 102, 51);"><br /></div><div style=""><font color="#004c99">static unique_ptr&lt;LocalTableFunctionState&gt; <b style=""><u>TableScanInitLocal</u></b><br /></font></div><div style=""><div><font color="#004c99"><span style="white-space: pre;">	</span>auto result = make_uniq&lt;TableScanLocalState&gt;();</font></div><div><span style="white-space: normal;"><font color="#004c99"><span style="white-space: pre;">	</span>auto &amp;bind_data = input.bind_data-&gt;Cast&lt;TableScanBindData&gt;();</font></span></div><div><span style="white-space: normal;"><font color="#004c99"><span style="white-space: pre;">	</span>vector&lt;column_t&gt; column_ids = input.column_ids;</font></span></div><div><span style="white-space: normal;"><font color="#004c99"><span style="white-space: pre;">	</span>for (auto &amp;col : column_ids) {</font></span></div><div><span style="white-space: normal;"><font color="#004c99"><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>auto storage_idx = GetStorageIndex(bind_data.table, col);</font></span></div><div><span style="white-space: normal;"><font color="#004c99"><span style="white-space:pre"><span style="white-space: pre;">	</span>	</span>col = storage_idx;</font></span></div><div><span style="white-space: normal;"><font color="#004c99"><span style="white-space: pre;">	</span>}</font></span></div><div><span style="white-space: normal;"><font color="#004c99"><span style="white-space: pre;">	</span>result-&gt;scan_state.<b>Initialize</b>(std::move(column_ids), input.filters.get());</font></span></div><div><span style="white-space: normal;"><font color="#004c99"><b><u><span style="white-space: pre;">	</span>TableScanParallelStateNext</u></b>(context.client, input.bind_data.get(), result.get(), gstate);</font></span></div></div><div style=""><span style="white-space: normal;"><font color="#004c99"><br /></font></span></div><div style=""><font color="#004c99">bool <b><i>TableScanParallelStateNext</i></b><br /></font></div><div style=""><font color="#004c99"><span style="white-space: pre;">	</span>return storage.<b><u>NextParallelScan</u></b>(context, parallel_state.state, state.scan_state);<br /></font></div><div style="color: rgb(0, 102, 51);"><br /></div></div></div></div></div></div></foreignObject><text x="3407" y="1491" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">function/table/table_scan.cpp...</text></switch></g></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-11"><g><path d="M 4665 1595 L 4685 1595 L 4685 1820 L 4495 1820 L 4495 1832.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4495 1837.88 L 4491.5 1830.88 L 4495 1832.63 L 4498.5 1830.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-22"><g><path d="M 4665 1492.5 L 4805 1492.5 L 4805 895 L 4938.63 895" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4943.88 895 L 4936.88 898.5 L 4938.63 895 L 4936.88 891.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-7"><g><rect x="4025" y="1390" width="640" height="410" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 638px; height: 1px; padding-top: 1397px; margin-left: 4027px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/data_table.cpp</div><div><br /></div><div><div style=""><div style="color: rgb(0, 102, 51);">void DataTable::<b><i>Scan</i></b>(DuckTransaction &amp;transaction, DataChunk &amp;result, TableScanState &amp;state)<br /></div><div style="color: rgb(0, 102, 51);"><div><span style="white-space: pre;">	</span>// scan the persistent segments</div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>if (state.table_state.<b><u>Scan</u></b>(transaction, result)) {</span></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span>// scan the transaction-local segments</span><br /></div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>auto &amp;local_storage = LocalStorage::Get(transaction);</span></div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>local_storage.<b><u>Scan</u></b>(state.local_state, state.GetColumnIds(), result);</span></div></div><div style="color: rgb(0, 102, 51);"><br /></div><div style=""><font color="#004c99">bool DataTable::<b style=""><i>NextParallelScan</i></b></font></div><div style=""><div style=""><font color="#004c99"><span style="white-space: pre;">	</span>if (row_groups-&gt;<b><u>NextParallelScan</u></b>(context, state.scan_state, scan_state.table_state)) {</font></div><div style=""><span style="white-space: normal;"><font color="#004c99"><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>return true;</font></span></div><div style=""><span style="white-space: normal;"><font color="#004c99"><span style="white-space: pre;">	</span>}</font></span></div><div style=""><span style="white-space: normal;"><font color="#004c99"><span style="white-space: pre;">	</span>auto &amp;local_storage = LocalStorage::Get(context, db);</font></span></div><div style=""><span style="white-space: normal;"><font color="#004c99"><span style="white-space: pre;">	</span>if (local_storage.<b><u>NextParallelScan</u></b>(context, *this, state.local_state, scan_state.local_state)) {</font></span></div><div style=""><span style="white-space: normal;"><font color="#004c99"><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>return true;</font></span></div><div style=""><span style="white-space: normal;"><font color="#004c99"><span style="white-space: pre;">	</span>} else {</font></span></div><div style=""><span style="white-space: normal;"><font color="#004c99"><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>// <u>finished all scans: no more scans remaining</u></font></span></div><div style=""><span style="white-space: normal;"><font color="#004c99"><span style="white-space:pre"><span style="white-space: pre;">	</span>	</span>return false;</font></span></div><div style=""><span style="white-space: normal;"><font color="#004c99"><span style="white-space: pre;">	</span>}</font></span></div></div></div></div></div></div></div></foreignObject><text x="4027" y="1411" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/data_table.cpp...</text></switch></g></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-12"><g><path d="M 4845 2117.25 L 4934.13 1471.31" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4934.85 1466.11 L 4937.36 1473.52 L 4934.13 1471.31 L 4930.42 1472.56 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-9"><g><rect x="4145" y="1839" width="700" height="371" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 698px; height: 1px; padding-top: 1846px; margin-left: 4147px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/table/row_group_collection.cpp</div><div><br /></div><div><div style=""><font color="#004c99">bool RowGroupCollection::<b style=""><i>NextParallelScan</i></b><br /></font></div><div style=""><font color="#004c99"><span style="white-space: pre;">	</span>// conditions...</font></div><div style=""><font color="#004c99"><span style="white-space: pre;">	</span>state.current_row_group = row_groups-&gt;GetNextSegment(state.current_row_group);</font></div><div style=""><font color="#004c99"><br /></font></div><div style=""><div style=""><font color="#004c99"><span style="white-space: pre;">	</span>bool need_to_scan = <b><u>InitializeScanInRowGroup</u></b>(scan_state, *collection, *row_group, vector_index,</font></div><div style=""><font color="#004c99"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>max_row);</font></div><div style=""><font color="#004c99"><span style="white-space: pre;">	</span>if (!need_to_scan) {</font></div><div style=""><font color="#004c99"><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>// skip this row group</font></div><div style=""><font color="#004c99"><span style="white-space:pre"><span style="white-space: pre;">	</span>	</span>continue;</font></div><div style=""><font color="#004c99"><span style="white-space: pre;">	</span>}</font></div><div style=""><font color="#004c99"><span style="white-space: pre;">	</span>return true;</font></div><div style=""><font color="#004c99"><br /></font></div><div style=""><font color="#004c99">bool RowGroupCollection::<b><i>InitializeScanInRowGroup</i></b><br /></font></div><div style=""><div style=""><font color="#004c99"><span style="white-space: pre;">	</span>if (!state.column_scans) {</font></div><div style=""><span style="white-space: normal;"><font color="#004c99"><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>// initialize the scan state</font></span></div><div style=""><span style="white-space: normal;"><font color="#004c99"><span style="white-space:pre"><span style="white-space: pre;">	</span>	</span>state.<b><u>Initialize</u></b>(collection.GetTypes());</font></span></div><div style=""><span style="white-space: normal;"><font color="#004c99"><span style="white-space: pre;">	</span>}</font></span></div><div style=""><span style="white-space: normal;"><font color="#004c99"><span style="white-space: pre;">	</span>return row_group.<b style=""><u>InitializeScanWithOffset</u></b>(state, vector_index);</font></span></div></div></div></div></div></div></div></foreignObject><text x="4147" y="1860" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/table/row_group_collection.cpp...</text></switch></g></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-10"><g><rect x="4935" y="1310" width="780" height="1770" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 778px; height: 1px; padding-top: 1317px; margin-left: 4937px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/table/row_group.cpp</div><div><br /></div><div><div style=""><div style=""><font color="#004c99">bool RowGroup::<i style=""><b>InitializeScanWithOffset</b>(CollectionScanState &amp;state, idx_t vector_offset) {</i></font></div><div style=""><font color="#004c99"><span style="white-space:pre">	</span>auto &amp;column_ids = state.GetColumnIds();</font></div><div style=""><font color="#004c99"><span style="white-space:pre">	</span>auto filters = state.GetFilters();</font></div><div style=""><font color="#004c99"><span style="white-space:pre">	</span>if (filters) {</font></div><div style=""><font color="#004c99"><span style="white-space:pre">		</span>if (!CheckZonemap(*filters, column_ids)) {</font></div><div style=""><font color="#004c99"><span style="white-space:pre">			</span>return false;</font></div><div style=""><font color="#004c99"><span style="white-space:pre">		</span>}</font></div><div style=""><font color="#004c99"><span style="white-space:pre">	</span>}  // ...</font></div><div style=""><div><font color="#004c99"><span style="white-space: pre;">	</span>for (idx_t i = 0; i &lt; column_ids.size(); i++) {</font></div><div><span style="white-space: normal;"><font color="#004c99"><span style="white-space:pre">		</span>const auto &amp;column = column_ids[i];</font></span></div><div><span style="white-space: normal;"><font color="#004c99"><span style="white-space:pre">		</span>if (column != COLUMN_IDENTIFIER_ROW_ID) {</font></span></div><div><span style="white-space: normal;"><font color="#004c99"><span style="white-space:pre">			</span>auto &amp;column_data = <b><u>GetColumn</u></b>(column);</font></span></div><div><span style="white-space: normal;"><font color="#004c99"><span style="white-space:pre">			</span>column_data.<b><u>InitializeScanWithOffset</u></b>(state.column_scans[i], row_number);</font></span></div><div><span style="white-space: normal;"><font color="#004c99"><span style="white-space:pre">			</span>state.column_scans[i].scan_options = &amp;state.GetOptions();</font></span></div></div><div style="color: rgb(0, 102, 51);"><span style="white-space: normal;"><br /></span></div><div style="color: rgb(0, 102, 51);">void RowGroup::<b><i>Scan</i></b><i>(TransactionData transaction, CollectionScanState &amp;state, DataChunk &amp;result)</i><br /></div><div style="color: rgb(0, 102, 51);"><b><u><span style="white-space: pre;">	</span>TemplatedScan</u></b>&lt;TableScanType::TABLE_SCAN_REGULAR&gt;(transaction, state, result);<br /></div><div style="color: rgb(0, 102, 51);"><br /></div><div style="color: rgb(0, 102, 51);"><div>template &lt;TableScanType TYPE&gt;</div><div>void RowGroup::<b><i>TemplatedScan</i></b><i>(TransactionData transaction, CollectionScanState &amp;state, DataChunk &amp;result)</i></div></div><div style="color: rgb(0, 102, 51);">while (true) { // ...</div><div style="color: rgb(0, 102, 51);"><div><span style="white-space: pre;">	</span>if (state.vector_index * STANDARD_VECTOR_SIZE &gt;= state.max_row_group_row) {</div><div><span style="white-space:pre">		</span>// exceeded the amount of rows to scan</div><div><span style="white-space:pre">		</span>return;</div><div><span style="white-space:pre">	</span>}</div></div><div style="color: rgb(0, 102, 51);"><div><div><span style="white-space: pre;">	</span>//! first check the zonemap if we have to scan this partition</div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>if (!<b><u>CheckZonemapSegments</u></b>(state)) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	<span style="white-space: pre;">	</span></span>continue;</span></div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>}</span></div></div><div><div style=""><span style="white-space: pre;">	</span>// second, scan the version chunk manager to figure out which tuples to load for this transaction</div><div style=""><span style="white-space: normal;"><span style="white-space: pre;">	</span>if (TYPE == TableScanType::TABLE_SCAN_REGULAR) {</span></div><div style=""><span style="white-space: normal;"><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>count = state.row_group-&gt;<b><u>GetSelVector</u></b>(transaction, state.vector_index, valid_sel, max_count);</span></div></div><div style=""><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>if (count == 0) { // nothing to scan for this vector, skip the entire vector </span></div><div style=""><span style="background-color: initial;"><span style="white-space: pre;"><span style="white-space: pre;">	</span>	</span><span style="white-space: pre;">	</span>NextVector(state);</span></div><div style=""><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>continue; </span></div><div style=""><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>}</span></div><div style=""><span style="white-space: pre;">	</span>if (count == max_count &amp;&amp; !table_filters) {<br /></div><div style=""><div><span style="white-space: pre;">	<span style="white-space: pre;">	</span></span>// scan all vectors completely: full scan without deletions or table filters</div><div><span style="white-space:pre"><span style="white-space: pre;">	</span>	</span>for (idx_t i = 0; i &lt; column_ids.size(); i++) {</div><div><span style="white-space:pre">	<span style="white-space: pre;">	</span>	</span>const auto &amp;column = column_ids[i];</div><div><span style="white-space:pre">		<span style="white-space: pre;">	</span></span>if (column == COLUMN_IDENTIFIER_ROW_ID) {</div><div><span style="white-space:pre">			<span style="white-space: pre;">	</span></span>// scan row id</div><div><span style="white-space:pre"><span style="white-space: pre;">	</span>			</span>result.data[i].Sequence(UnsafeNumericCast&lt;int64_t&gt;(this-&gt;start + current_row), 1, count);</div><div><span style="white-space:pre">	<span style="white-space: pre;">	</span>	</span>} else {</div><div><span style="white-space:pre">		<span style="white-space: pre;">	</span>	</span>auto &amp;col_data = <b><u>GetColumn</u></b>(column);</div><div><span style="white-space:pre">			<span style="white-space: pre;">	</span></span>if (TYPE != TableScanType::TABLE_SCAN_REGULAR) {</div><div><span style="white-space:pre">				<span style="white-space: pre;">	</span></span>col_data.<b><u>ScanCommitted</u></b>(state.vector_index, state.column_scans[i], result.data[i],</div><div><span style="white-space:pre">						</span>                       ALLOW_UPDATES);</div><div><span style="white-space:pre"><span style="white-space: pre;">	</span>			</span>} else {</div><div><span style="white-space:pre">	<span style="white-space: pre;">	</span>			</span>col_data.<b><u>Scan</u></b>(transaction, state.vector_index, state.column_scans[i], result.data[i]);</div><div><span style="white-space: pre;">	</span>} else {<br /></div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="background-color: initial;">// partial scan: we have deletions or table filters</span></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>SelectionVector sel; </span></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>sel.Initialize(valid_sel);</span></div></div><div><span style="white-space: pre;"><span style="white-space: pre;">	</span>	</span>if (table_filters) {</div><div><span style="white-space: normal;"><span style="white-space:pre">	<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span></span>for (idx_t i = 0; i &lt; table_filters-&gt;filters.size(); i++) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span></span>auto &amp;col_data = GetColumn(col_idx);</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		<span style="white-space: pre;">	<span style="white-space: pre;">	</span></span></span>col_data.<b><u>Select</u></b>(transaction, state.vector_index, state.column_scans[tf_idx], result.data[tf_idx], </span></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>  sel, approved_tuple_count, *table_filters-&gt;filters[tf_idx]);</span></div><div><span style="white-space: normal;"><span style="white-space:pre"><span style="white-space: pre;">	</span>	<span style="white-space: pre;">	</span></span>}</span></div><div><span style="white-space: normal;"><span style="white-space:pre"><span style="white-space: pre;"><span style="white-space: pre;">	</span>	</span>	</span>for (auto &amp;table_filter : table_filters-&gt;filters) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>	</span>result.data[table_filter.first].<b><u>Slice</u></b>(sel, approved_tuple_count);</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	<span style="white-space: pre;">	<span style="white-space: pre;">	</span></span></span>}</span></div></div><div style="color: rgb(0, 102, 51);"><span style="white-space: normal;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>}<br /></span></div><div style="color: rgb(0, 102, 51);"><div style=""><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>if (approved_tuple_count == 0) {</div><div style=""><span style="white-space: normal;"><span style="white-space:pre">			</span>// all rows were filtered out by the table filters</span></div><div style=""><span style="white-space: normal;"><span style="white-space:pre">			</span>// skip this vector in all the scans that were not scanned yet</span></div><div style=""><span style="white-space: normal;"><span style="white-space:pre">			</span>result.Reset();</span></div><div style=""><span style="white-space: normal;"><span style="white-space:pre">			</span>for (idx_t i = 0; i &lt; column_ids.size(); i++) {</span></div><div style=""><span style="white-space: normal;"><span style="white-space:pre">				</span>auto col_idx = column_ids[i];</span></div><div style=""><span style="white-space: normal;"><span style="white-space:pre">				</span>if (table_filters-&gt;filters.find(i) == table_filters-&gt;filters.end()) {</span></div><div style=""><span style="white-space: normal;"><span style="white-space:pre">					</span>auto &amp;col_data = GetColumn(col_idx);</span></div><div style=""><span style="white-space: normal;"><span style="white-space:pre">					</span>col_data.Skip(state.column_scans[i]);</span></div><div style=""><span style="white-space: normal;"><span style="white-space:pre">				</span>}</span></div><div style=""><span style="white-space: normal;"><span style="white-space:pre">			</span>}</span></div><div style=""><span style="white-space: normal;"><span style="white-space:pre">			</span>state.vector_index++;</span></div><div style=""><span style="white-space: normal;"><span style="white-space:pre">			</span>continue;</span></div><div style=""><span style="white-space: normal;"><span style="white-space: pre;">		</span>}</span></div></div><div style="color: rgb(0, 102, 51);"><span style="white-space: normal;"><div><span style="white-space: pre;">	</span>//! Now we use the selection vector to fetch data for the other columns.</div><div><span style="white-space:pre">	</span>for (idx_t i = 0; i &lt; column_ids.size(); i++) {</div><div><span style="white-space:pre">		</span>if (!table_filters || table_filters-&gt;filters.find(i) == table_filters-&gt;filters.end()) {</div><div><span style="white-space:pre">			</span>auto column = column_ids[i];</div><div><span style="white-space:pre">			</span>if (column == COLUMN_IDENTIFIER_ROW_ID) {</div><div><span style="white-space:pre">				</span>auto result_data = FlatVector::GetData&lt;int64_t&gt;(result.data[i]);</div><div><span style="white-space:pre">				</span>for (size_t sel_idx = 0; sel_idx &lt; approved_tuple_count; sel_idx++) {</div><div><span style="white-space:pre">					</span>result_data[sel_idx] = <span style="background-color: initial;">UnsafeNumericCast&lt;int64_t&gt;(this-&gt;start + current_row + <span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>    sel.get_index(sel_idx));</span></div><div><span style="white-space:pre">				</span>}</div><div><span style="white-space:pre">			</span>} else {</div><div><span style="white-space:pre">				</span>auto &amp;col_data = GetColumn(column);</div><div><span style="white-space:pre">				</span>if (TYPE == TableScanType::TABLE_SCAN_REGULAR) {</div><div><span style="white-space:pre">					</span>col_data.<b><u>FilterScan</u></b>(transaction, state.vector_index, state.column_scans[i], result.data[i],</div><div><span style="white-space:pre">							</span>                    sel, approved_tuple_count);</div><div><span style="white-space:pre">	<span style="white-space: pre;">	</span>		</span>} else {</div><div><span style="white-space:pre">					</span>col_data.FilterScanCommitted(state.vector_index, state.column_scans[i], result.data[i], sel,</div><div><span style="white-space:pre">							</span>                             approved_tuple_count, ALLOW_UPDATES);</div><div><span style="white-space:pre">				</span>}</div><div><span style="white-space:pre">			</span>}</div><div><span style="white-space:pre">		</span>}</div><div><span style="white-space:pre">	</span>}</div></span></div></div></div></div></div></div></foreignObject><text x="4937" y="1331" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/table/row_group.cpp...</text></switch></g></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-35"><g><path d="M 5695 1465 L 5768.47 1506.85" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 5773.03 1509.45 L 5765.21 1509.02 L 5768.47 1506.85 L 5768.68 1502.94 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-21"><g><path d="M 2410.96 1070 L 2404.66 1113.7" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2403.91 1118.89 L 2401.44 1111.47 L 2404.66 1113.7 L 2408.37 1112.46 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-18"><g><path d="M 3958 2060 L 3958 1685 L 3945 1685" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-19"><g><path d="M 3725 2422 L 3725 2910 L 2435 2910" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-17"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 3755 2060 L 4080 2060 L 4100 2080 L 4100 2110 L 3755 2110 L 3755 2060 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,3927.5,2085)" pointer-events="all"/><path d="M 4080 2060 L 4080 2080 L 4100 2080 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,3927.5,2085)" pointer-events="all"/><path d="M 4080 2060 L 4080 2080 L 4100 2080" fill="none" stroke="none" transform="rotate(180,3927.5,2085)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 343px; height: 1px; padding-top: 2085px; margin-left: 3756px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">static void TableScanFunc(ClientContext &amp;context, TableFunctionInput &amp;data_p, DataChunk &amp;output)</div></div></div></foreignObject><text x="3928" y="2089" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="14px" text-anchor="middle">static void TableScanFunc(ClientContext &amp;context,...</text></switch></g></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-21"><g><rect x="4945" y="780" width="540" height="460" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 538px; height: 1px; padding-top: 787px; margin-left: 4947px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/table/scan_state.cpp</div><div><br /></div><div><div style=""><div style="color: rgb(0, 102, 51);">class CollectionScanState {</div><div style="color: rgb(0, 102, 51);">public:</div><div style=""><div style=""><font color="#006633"><span style="white-space: pre;">	</span>//! The current row_group we are scanning</font></div><div style=""><font color="#006633"><span style="white-space: normal;"><span style="white-space: pre;">	</span>RowGroup *row_group;</span></font></div><div style=""><font color="#006633"><span style="white-space: normal;"><br /></span></font></div><div style=""><font color="#006633"><span style="white-space: normal;"><div><span style="white-space: pre;">	</span>//! Row group segment tree</div><div><span style="white-space:pre">	</span>RowGroupSegmentTree *row_groups;</div><div><span style="white-space: pre;">	</span>...<br /></div></span></font></div></div></div><div style="color: rgb(0, 102, 51);"><br /></div><div style="color: rgb(0, 102, 51);">bool CollectionScanState::<b><i>Scan</i></b>(DuckTransaction &amp;transaction, DataChunk &amp;result)<br /></div><div style=""><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span>while (row_group) {</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">		</span>row_group-&gt;<b><u>Scan</u></b>(transaction, *this, result);</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">		</span>if (result.size() &gt; 0) {</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">			</span>return true;</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">		</span>} else if (max_row &lt;= row_group-&gt;start + row_group-&gt;count) {</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">			</span>row_group = nullptr;</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">			</span>return false;</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">		</span>} else {</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">			</span>do {</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">				</span>row_group = row_groups-&gt;GetNextSegment(row_group);</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">				</span>if (row_group) {</div><div style="color: rgb(0, 102, 51);"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>// ...<br /></div><div style=""><span style="color: rgb(0, 102, 51); white-space: pre;">					</span><font color="#003366">bool scan_row_group = row_group-&gt;<b style=""><u>InitializeScan</u></b>(*this);</font></div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">		</span></div></div></div></div></div></div></foreignObject><text x="4947" y="801" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/table/scan_state.cpp...</text></switch></g></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-29"><g><rect x="7394" y="1920" width="861" height="220" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 859px; height: 1px; padding-top: 1927px; margin-left: 7396px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>function/compression_config.cpp</div><div><br /></div><div><div><font color="#660000">optional_ptr&lt;CompressionFunction&gt; DBConfig::<b><i>GetCompressionFunction</i></b>(CompressionType type, PhysicalType data_type) {</font></div><div><font color="#660000"><span style="white-space: normal;"><span style="white-space:pre">	</span>lock_guard&lt;mutex&gt; l(<b>compression_functions</b>-&gt;lock);  // DBConfig::</span></font><span style="background-color: initial;"><font color="#660000">unique_ptr&lt;CompressionFunctionSet&gt; compression_functions;</font></span></div><div><font color="#660000"><span style="white-space: normal;"><span style="white-space:pre">	</span>// check if the function is already loaded</span></font></div><div><font color="#660000"><span style="white-space: normal;"><span style="white-space:pre">	</span>auto function = FindCompressionFunction(*compression_functions, type, data_type);</span></font></div><div><font color="#660000"><span style="white-space: normal;"><span style="white-space:pre">	</span>if (function) {</span></font></div><div><font color="#660000"><span style="white-space: normal;"><span style="white-space:pre">		</span>return function;</span></font></div><div><font color="#660000"><span style="white-space: normal;"><span style="white-space:pre">	</span>}</span></font></div><div><font color="#660000"><span style="white-space: normal;"><span style="white-space:pre">	</span>// else load the function</span></font></div><div><font color="#660000"><span style="white-space: normal;"><span style="white-space:pre">	</span>return <b><u>LoadCompressionFunction</u></b>(*compression_functions, type, data_type);</span></font></div><div><font color="#660000">}</font></div></div></div></div></div></foreignObject><text x="7396" y="1941" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">function/compression_config.cpp...</text></switch></g></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-27"><g><rect x="6595" y="1510" width="690" height="288" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 688px; height: 1px; padding-top: 1517px; margin-left: 6597px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>include/duckdb/storage/table/data_pointer.hpp</div><div><font color="#660000"><br /></font></div><div><font color="#660000"><div>struct DataPointer {</div><div><span style="white-space:pre">	</span>uint64_t row_start;</div><div><span style="white-space:pre">	</span>uint64_t tuple_count;</div><div><span style="white-space:pre">	</span>BlockPointer block_pointer;</div><div><span style="white-space:pre">	</span>CompressionType compression_type;</div><div><span style="white-space:pre">	</span>//! Type-specific statistics of the segment</div><div><span style="white-space:pre">	</span>BaseStatistics statistics;</div><div><span style="white-space:pre">	</span>//! Serialized segment state</div><div><span style="white-space:pre">	</span>unique_ptr&lt;ColumnSegmentState&gt; segment_state;</div><div><br /></div><div><span style="white-space:pre">	</span>void Serialize(Serializer &amp;serializer) const;</div><div><span style="white-space:pre">	</span>static DataPointer Deserialize(Deserializer &amp;source);</div><div>};</div></font></div><div><br /></div><div><br /></div></div></div></div></foreignObject><text x="6597" y="1531" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">include/duckdb/storage/table/data_pointer.hpp...</text></switch></g></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-32"><g><path d="M 5715 3252.5 L 5715 3105 L 5745 3105 L 5745 1730 L 5768.34 1730.02" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 5773.59 1730.02 L 5766.59 1733.51 L 5768.34 1730.02 L 5766.59 1726.51 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="0rRjchkaSUUTLkPYM30E-6"><g><rect x="6595" y="1920" width="731" height="570" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 729px; height: 1px; padding-top: 1927px; margin-left: 6597px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><span style="background-color: initial;">storage/table/column_segment.cpp</span></div><div><font color="#660000"><span style="background-color: initial;"><br /></span></font></div><div><font color="#660000"><span style="background-color: initial;">ColumnSegment::</span><b style="background-color: initial;"><i>CreatePersistentSegment</i></b></font><span style="background-color: initial;"><font color="#660000"><i style="">(DatabaseInstance &amp;db, BlockManager &amp;block_manager,</i></font></span></div><div><i><font color="#660000">                                                                 </font><span style="color: rgb(0, 102, 51); background-color: initial;">block_id_t block_id</span></i><i style="color: rgb(102, 0, 0); background-color: initial;">, idx_t offset,</i></div><div><font color="#660000"><i>                                                                 const LogicalType &amp;type, idx_t start, idx_t count,</i></font></div><div><font color="#660000"><i>                                                                 <b>CompressionType compression_type</b>,</i></font></div><div><font color="#660000"><i>                                                                 BaseStatistics statistics,</i></font></div><div><span style="background-color: initial;"><font color="#660000"><i style="">                                                                 unique_ptr&lt;ColumnSegmentState&gt; segment_state)</i></font></span><font color="#660000"><span style="background-color: initial;">:</span><br /></font></div><div><font color="#660000"><span style="white-space: pre;">	</span>function = config.<b><u>GetCompressionFunction</u></b>(compression_type, type.InternalType());</font></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span>block = block_manager.RegisterBlock(block_id);</font></span></div><div><font color="#660000"><span style="white-space: pre;">	</span>return make_uniq&lt;<b>ColumnSegment</b>&gt;(db, std::move(block), type, ColumnSegmentType::PERSISTENT, start, <span style="white-space: pre;">	<span style="white-space: pre;">	<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span></span></span>count, *function, std::move(statistics), block_id, offset, segment_size, std::move(segment_state));</font></div><div><br /></div><div><div><font color="#003366">ColumnSegment::<i><b>InitializeScan</b></i>(ColumnScanState &amp;state) {</font></div><div><span style="white-space: normal;"><font color="#003366"><span style="white-space:pre">	</span>state.scan_state = function.get().init_scan(*this);</font></span></div><div><font color="#003366">}</font></div></div><div><font color="#003366"><br /></font></div><div><div style="color: rgb(0, 102, 51);"><span style="background-color: initial;">ColumnSegment::<b><i>Scan</i></b>(ColumnScanState &amp;state, idx_t scan_count, Vector &amp;result, idx_t result_offset,</span></div><div style="color: rgb(0, 102, 51);">                         <span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>bool entire_vector) {</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">	</span>if (entire_vector) {</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">		</span><b><u>Scan</u></b>(state, scan_count, result);</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">	</span>} else {</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">		</span><b><u>ScanPartial</u></b>(state, scan_count, result, result_offset);</div><div style="color: rgb(0, 102, 51);"><span style="white-space:pre">	</span>}</div><div style="color: rgb(0, 102, 51);">}</div></div><div style="color: rgb(0, 102, 51);"><br /></div><div style=""><div style=""><font color="#006633">void ColumnSegment::<b><i>Scan</i></b>(ColumnScanState &amp;state, idx_t scan_count, Vector &amp;result) {</font></div><div style=""><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span><b>function.get().scan_vector(*this, state, scan_count, result);</b></span></font></div><div style=""><font color="#006633">}</font></div><div style=""><font color="#006633"><br /></font></div><div style=""><font color="#006633">void ColumnSegment::<b><i>ScanPartial</i></b>(ColumnScanState &amp;state, idx_t scan_count, Vector &amp;result, idx_t result_offset) {</font></div><div style=""><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span><b>function.get().scan_partial(*this, state, scan_count, result, result_offset);</b></span></font></div><div style=""><font color="#006633">}</font></div></div><div><br /></div></div></div></div></foreignObject><text x="6597" y="1941" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/table/column_segment.cpp...</text></switch></g></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-12"><g><path d="M 4935 1527.5 L 4915 1527.5 L 4915 3405 L 4928.38 3405" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4933.63 3405 L 4926.63 3408.5 L 4928.38 3405 L 4926.63 3401.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-36"><g><rect x="4935" y="1340" width="760" height="250" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-1"><g><rect x="985" y="0" width="590" height="840" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 588px; height: 1px; padding-top: 7px; margin-left: 987px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp</div><div><br /></div><div><font color="#006633">int <b>sqlite3_open</b>(const char *filename, /* Database filename (UTF-8) */</font></div><div><font color="#006633">                 <span style="white-space: pre;">	</span>  sqlite3 **ppDb)            /* OUT: SQLite db handle */</font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>return <b><u>sqlite3_open_v2</u></b>(filename, ppDb, 0, NULL);</span></font></div><div><font color="#006633"><br /></font></div><div><font color="#006633">int <b><i>sqlite3_open_v2</i></b>(const char *filename, /* Database filename (UTF-8) */</font></div><div><font color="#006633">                    <span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>sqlite3 **ppDb,       <span style="white-space: pre;">	</span>    /* OUT: SQLite db handle */</font></div><div><font color="#006633">                    <span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>int flags,            <span style="white-space: pre;">	</span>    /* Flags */</font></div><div><font color="#006633">                    <span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>const char *zVfs)         /* Name of VFS module to use */</font></div><div><font color="#006633"><span style="white-space: pre;">	</span></font><span style="background-color: initial;"><font color="#006633">int rc = SQLITE_OK;</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span>pDb = new sqlite3();  // ...</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span></font></span><span style="background-color: initial;"><font color="#006633"><b><u>DBConfig</u></b> config;</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span>config.SetOptionByName("duckdb_api", "cli");</font></span></div><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span>config.options.access_mode = AccessMode::AUTOMATIC;</font></span></div><div><span style="background-color: initial;"><font color="#006633"><div><span style="white-space: pre;">	</span>pDb-&gt;db = make_uniq&lt;<b><u>DuckDB</u></b>&gt;(filename, &amp;config);</div><div><span style="white-space:pre">	</span>pDb-&gt;db-&gt;LoadExtension&lt;ShellExtension&gt;();</div><div><span style="white-space:pre">	</span>pDb-&gt;con = make_uniq&lt;<b><u>Connection</u></b>&gt;(*pDb-&gt;db);</div><div><span style="white-space: pre;">	</span><span style="background-color: initial;">*ppDb = pDb;</span></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span>return rc;</span><br /></div><div><span style="background-color: initial;"><br /></span></div><div><span style="background-color: initial;">int <b>sqlite3_prepare_v2</b>(</span><span style="background-color: initial;">sqlite3 *db,                /* Database handle */</span><span style="background-color: initial;"><br /></span></div></font></span><div><font color="#006633">                       <span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>    const char *zSql,         /* SQL statement, UTF-8 encoded */</font></div><div><font color="#006633">                       <span style="white-space: pre;">	</span><span style="white-space: pre;">	 </span>   int nByte,             <span style="white-space: pre;">	</span>/* Maximum length of zSql in bytes. */</font></div><div><font color="#006633">                       <span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>    sqlite3_stmt **ppStmt, /* OUT: Statement handle */</font></div><div><font color="#006633">                       <span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>    const char **pzTail       /* OUT: Pointer to unused portion of zSql */</font></div></div><div><font color="#006633"><span style="white-space: pre;">	</span></font><span style="background-color: initial;"><font color="#006633">string query = nByte &lt; 0 ? zSql : string(zSql, nByte);</font></span></div><div><span style="background-color: initial;"><font color="#006633"><div><span style="white-space: pre;">	</span><b><u>Parser</u></b> parser(db-&gt;con-&gt;context-&gt;GetParserOptions());</div><div><span style="white-space:pre">	</span>parser.<b><u>ParseQuery</u></b>(query);</div><div><span style="white-space: pre;">	</span>// extract remainder &amp; first statement...<br /></div><div><span style="white-space: pre;">	</span><span style="background-color: initial;">db-&gt;con-&gt;context-&gt;<b><u>HandlePragmaStatements</u></b>(statements);</span><br /></div><div><span style="background-color: initial;"><div><span style="white-space: pre;">	</span>// if there are multiple statements here, we are dealing with an import database statement</div><div><span style="white-space:pre">	</span>// we directly execute all statements besides the final one</div><div><span style="white-space:pre">	</span>for (idx_t i = 0; i + 1 &lt; statements.size(); i++) {</div><div><span style="white-space:pre">		</span>auto res = db-&gt;con-&gt;<b><u>Query</u></b>(std::move(statements[i]));</div><div><span style="white-space:pre">		</span>if (res-&gt;HasError()) {</div><div><span style="white-space:pre">			</span>db-&gt;last_error = res-&gt;GetErrorObject();</div><div><span style="white-space:pre">			</span>return SQLITE_ERROR;</div><div><span style="white-space:pre">		</span>}</div><div><span style="white-space:pre">	</span>}</div><div><span style="white-space:pre">	</span>// now prepare the query</div><div><span style="white-space:pre">	</span>auto prepared = db-&gt;con-&gt;<b><u>Prepare</u></b>(std::move(statements.back()));</div><div><span style="white-space:pre">	</span>if (prepared-&gt;HasError()) {</div><div><span style="white-space:pre">		</span>// failed to prepare: set the error message</div><div><span style="white-space:pre">		</span>db-&gt;last_error = prepared-&gt;error;</div><div><span style="white-space:pre">		</span>return SQLITE_ERROR;</div><div><span style="white-space:pre">	</span>}</div><div><span style="white-space: pre;">	</span><span style="background-color: initial;">*ppStmt = stmt.release(); </span></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span>return SQLITE_OK;</span><br /></div></span></div></font></span></div><div><br /></div></div></div></div></foreignObject><text x="987" y="21" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp...</text></switch></g></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-2"><g><rect x="1645" y="0" width="722" height="670" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 720px; height: 1px; padding-top: 7px; margin-left: 1647px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>main/database.cpp</div><div><br /></div><div><div><font color="#006633">DuckDB::<b><i>DuckDB</i></b>(const char *path, DBConfig *new_config) : instance(make_shared_ptr&lt;<b><u>DatabaseInstance</u></b>&gt;()) {</font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>instance-&gt;<b><u>Initialize</u></b>(path, new_config);</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>if (instance-&gt;config.options.load_extensions) {</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>ExtensionHelper::LoadAllExtensions(*this);</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>}</span></font></div><div><font color="#006633">}</font></div></div><div><font color="#006633"><br /></font></div><div><font color="#006633">void DatabaseInstance::<b><i>Initialize</i></b>(const char *database_path, DBConfig *user_config) {<br /></font></div><div><font color="#006633"><div><span style="white-space: pre;">	</span>db_file_system = make_uniq&lt;<b>DatabaseFileSystem</b>&gt;(*this);</div><div><span style="white-space:pre">	</span>db_manager = make_uniq&lt;<b>DatabaseManager</b>&gt;(*this);</div><div><span style="white-space:pre">	</span>if (config.buffer_manager) {</div><div><span style="white-space:pre">		</span>buffer_manager = config.buffer_manager;</div><div><span style="white-space:pre">	</span>} else {</div><div><span style="white-space:pre">		</span>buffer_manager = make_uniq&lt;<b>StandardBufferManager</b>&gt;(*this, config.options.temporary_directory);</div><div><span style="white-space:pre">	</span>}</div><div><span style="white-space:pre">	</span>scheduler = make_uniq&lt;<b>TaskScheduler</b>&gt;(*this);</div><div><span style="white-space:pre">	</span>object_cache = make_uniq&lt;<b>ObjectCache</b>&gt;();</div><div><span style="white-space:pre">	</span>connection_manager = make_uniq&lt;<b>ConnectionManager</b>&gt;();</div><div><br /></div><div><span style="white-space:pre">	</span>// initialize the secret manager</div><div><span style="white-space:pre">	</span>config.secret_manager-&gt;Initialize(*this);</div><div><br /></div><div><span style="white-space:pre">	</span>// resolve the type of teh database we are opening</div><div><span style="white-space:pre">	</span>auto &amp;fs = FileSystem::GetFileSystem(*this);</div><div><span style="white-space:pre">	</span>DBPathAndType::<b>ResolveDatabaseType</b>(fs, config.options.database_path, config.options.database_type);</div><div><br /></div><div><span style="white-space:pre">	</span>// initialize the system catalog</div><div><span style="white-space:pre">	</span>db_manager-&gt;InitializeSystemCatalog();</div><div><br /></div><div><div><span style="white-space: pre;">	</span>if (!db_manager-&gt;HasDefaultDatabase()) {</div><div><span style="white-space: normal;"><span style="white-space:pre">		</span><b>CreateMainDatabase</b>();</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>}</span></div><div><br /></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>// only increase thread count after storage init because we get races on catalog otherwise</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>scheduler-&gt;<b>SetThreads</b>(config.options.maximum_threads, config.options.external_threads);</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>scheduler-&gt;<b>RelaunchThreads</b>();</span></div></div></font></div></div></div></div></foreignObject><text x="1647" y="21" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">main/database.cpp...</text></switch></g></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-7"><g><path d="M 1965 830 L 1965 860 L 1759 860 L 1759 883.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1759 888.88 L 1755.5 881.88 L 1759 883.63 L 1762.5 881.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-5"><g><rect x="1645" y="690" width="640" height="140" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 638px; height: 1px; padding-top: 697px; margin-left: 1647px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>main/connection.cpp</div><div><br /></div><div><div><font color="#006633">unique_ptr&lt;MaterializedQueryResult&gt; Connection::<b><i>Query</i></b>(unique_ptr&lt;SQLStatement&gt; statement) {</font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>auto result = context-&gt;<b><u>Query</u></b>(std::move(statement), false);</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>D_ASSERT(result-&gt;type == QueryResultType::MATERIALIZED_RESULT);</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>return unique_ptr_cast&lt;QueryResult, MaterializedQueryResult&gt;(std::move(result));</span></font></div><div><font color="#006633">}</font></div></div></div></div></div></foreignObject><text x="1647" y="711" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">main/connection.cpp...</text></switch></g></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-11"><g><rect x="4935" y="1590" width="760" height="51" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-14"><g><rect x="5774" y="2720" width="730" height="720" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 728px; height: 1px; padding-top: 2727px; margin-left: 5776px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/table/column_data_checkpointer.cpp</div><div><br /></div><div><div style=""><div style=""><font color="#994c00">void ColumnDataCheckpointer::<i><b>Checkpoint</b>(vector&lt;SegmentNode&lt;ColumnSegment&gt;&gt; nodes_p) {</i></font></div><div style=""><font color="#994c00"><span style="white-space:pre">	</span>this-&gt;nodes = std::move(nodes_p);</font></div><div style=""><font color="#994c00"><span style="white-space:pre">	</span>// first check if any of the segments have changes</font></div><div style=""><font color="#994c00"><span style="white-space:pre">	</span>if (!HasChanges()) {</font></div><div style=""><font color="#994c00"><span style="white-space:pre">		</span>// no changes: only need to write the metadata for this column</font></div><div style=""><font color="#994c00"><span style="white-space:pre">		</span>WritePersistentSegments();</font></div><div style=""><font color="#994c00"><span style="white-space:pre">	</span>} else {</font></div><div style=""><font color="#994c00"><span style="white-space:pre">		</span>// there are changes: rewrite the set of columns);</font></div><div style=""><font color="#994c00"><span style="white-space:pre">		</span><b><u>WriteToDisk</u></b>();</font></div><div style=""><font color="#994c00"><span style="white-space:pre">	</span>}</font></div><div style=""><font color="#994c00">}</font></div></div><div style=""><font color="#994c00"><br /></font></div><div style=""><font color="#994c00">void ColumnDataCheckpointer::<i><b>WriteToDisk</b></i>() {<br /></font></div><div style=""><font color="#994c00"><span style="white-space: pre;">	</span><span style="background-color: initial;">// there were changes or transient segments<br />	<span style="white-space: pre;">	</span>// we need to rewrite the column segments to disk<br /><br />	<span style="white-space: pre;">	</span>// first we check the current segments<br />	<span style="white-space: pre;">	</span>// if there are any persistent segments, we will mark their old block ids as modified<br />	<span style="white-space: pre;">	</span>// since the segments will be rewritten their old on disk data is no longer required<br />	<span style="white-space: pre;">	</span>for (idx_t segment_idx = 0; segment_idx &lt; nodes.size(); segment_idx++) {<br />		<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>auto segment = nodes[segment_idx].node.get();<br />		<span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>segment-&gt;CommitDropSegment();<br />	<span style="white-space: pre;">	</span>}<br /><br />	<span style="white-space: pre;">	</span>// now we need to write our segment<br />	<span style="white-space: pre;">	</span>// we will first run an analyze step that determines which compression function to use<br />	<span style="white-space: pre;">	</span>idx_t compression_idx;<br />	<span style="white-space: pre;">	</span>auto analyze_state = <b><u>DetectBestCompressionMethod</u></b>(compression_idx);</span><br /></font></div><div style=""><span style="background-color: initial;"><font color="#994c00"><br /></font></span></div><div style=""><font color="#994c00"><span style="background-color: initial;"><span style="white-space: pre;">	</span><br /></span><span style="background-color: initial;"><span style="white-space: pre;">	</span>// now that we have analyzed the compression functions we can start writing to disk </span></font></div><div style=""><span style="background-color: initial;"><font color="#994c00"><span style="white-space: pre;">	</span>auto best_function = compression_functions[compression_idx];</font></span></div><div style=""><span style="background-color: initial;"><font color="#994c00"><span style="white-space: pre;">	</span>auto compress_state = best_function-&gt;init_compression(*this, std::move(analyze_state));</font></span></div><div style=""><span style="background-color: initial;"><font color="#994c00"><span style="white-space: pre;">	</span>ScanSegments(</font></span></div><div style=""><span style="background-color: initial;"><font color="#994c00"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>[&amp;](Vector &amp;scan_vector, idx_t count) { </font></span></div><div style=""><span style="background-color: initial;"><font color="#994c00"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>best_function-&gt;compress(*compress_state, scan_vector, count); }); </font></span></div><div style=""><span style="background-color: initial;"><font color="#994c00"><span style="white-space: pre;">	</span>best_function-&gt;compress_finalize(*compress_state);</font></span></div><div style=""><font color="#994c00"><br /></font></div><div style=""><font color="#994c00">unique_ptr&lt;AnalyzeState&gt; ColumnDataCheckpointer::<b><i>DetectBestCompressionMethod</i></b>(idx_t &amp;compression_idx) <br /></font></div><div style=""><div style=""><span style="white-space: pre;"><font color="#994c00">		</font></span></div></div></div></div></div></div></foreignObject><text x="5776" y="2741" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/table/column_data_checkpointer.cpp...</text></switch></g></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-15"><g><rect x="5785.5" y="3480" width="707" height="130" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 705px; height: 1px; padding-top: 3487px; margin-left: 5788px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/table/column_checkpoint_state.cpp</div><div><br /></div><div><div style=""><font color="#994c00">void ColumnCheckpointState::FlushSegment(unique_ptr&lt;ColumnSegment&gt; segment, idx_t segment_size) {<br /></font></div><div style=""><font color="#994c00"><span style="white-space: pre;">	</span><span style="background-color: initial;">// construct the data pointer<br />	<span style="white-space: pre;">	</span>DataPointer data_pointer(segment-&gt;stats.statistics.Copy());  // more params set...<br />	<span style="white-space: pre;">	</span>data_pointer.<b style="">compression_type</b> = segment-&gt;function.get().type;</span></font><br /></div></div></div></div></div></foreignObject><text x="5788" y="3501" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/table/column_checkpoint_state.cpp...</text></switch></g></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-16"><g><path d="M 6137.91 2650 L 6138.9 2713.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 6138.98 2718.88 L 6135.37 2711.94 L 6138.9 2713.63 L 6142.37 2711.83 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-7"><g><path d="M 3335 2300 L 3398.63 2300" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 3403.88 2300 L 3396.88 2303.5 L 3398.63 2300 L 3396.88 2296.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-18"><g><rect x="2710" y="2260" width="625" height="80" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-19"><g><rect x="3405" y="1600" width="540" height="170" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-23"><g><path d="M 3945 1685 L 4022.56 1498.38" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4024.57 1493.53 L 4025.12 1501.34 L 4022.56 1498.38 L 4018.65 1498.65 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-20"><g><rect x="5774" y="2045" width="521" height="55" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-21"><g><rect x="5055" y="2152" width="560.5" height="44" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-34"><g><path d="M 5615.5 2174 L 5768.64 2075.93" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 5773.06 2073.1 L 5769.05 2079.83 L 5768.64 2075.93 L 5765.28 2073.93 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-22"><g><rect x="5895" y="2390" width="490" height="45" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-10"><g><path d="M 6385 2412.5 L 6590.02 2248.97" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 6594.13 2245.7 L 6590.84 2252.8 L 6590.02 2248.97 L 6586.47 2247.33 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-26"><g><path d="M 7824.5 2360 L 7824.5 2380 L 7824.5 2370 L 7824.5 2383.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 7824.5 2388.88 L 7821 2381.88 L 7824.5 2383.63 L 7828 2381.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-23"><g><rect x="7394" y="2200" width="861" height="160" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 859px; height: 1px; padding-top: 2207px; margin-left: 7396px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/compression/string_uncompressed.cpp</div><div><br /></div><div><font color="#006633"><div style=""><div>unique_ptr&lt;SegmentScanState&gt; UncompressedStringStorage::StringInitScan(ColumnSegment &amp;segment) {</div><div><span style="white-space:pre">	</span>auto result = make_uniq&lt;StringScanState&gt;();</div><div><span style="white-space:pre">	</span>auto &amp;buffer_manager = BufferManager::GetBufferManager(segment.db);</div><div><span style="white-space:pre">	</span>result-&gt;handle = buffer_manager.Pin(segment.block);</div><div><span style="white-space:pre">	</span>return std::move(result);</div><div>}</div></div></font></div></div></div></div></foreignObject><text x="7396" y="2221" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/compression/string_uncompressed.cpp...</text></switch></g></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-24"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 7925 2270 L 8185 2270 L 8195 2280 L 8195 2330 L 7925 2330 L 7925 2270 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,8060,2300)" pointer-events="all"/><path d="M 8185 2270 L 8185 2280 L 8195 2280 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,8060,2300)" pointer-events="all"/><path d="M 8185 2270 L 8185 2280 L 8195 2280" fill="none" stroke="none" transform="rotate(180,8060,2300)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 268px; height: 1px; padding-top: 2300px; margin-left: 7927px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">From column segment block handle, init function sets buffer pin into state handle.</div></div></div></foreignObject><text x="7927" y="2304" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px">From column segment block handle, init functi...</text></switch></g></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-30"><g><path d="M 7824.5 2960 L 7824.5 2993.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 7824.5 2998.88 L 7821 2991.88 L 7824.5 2993.63 L 7828 2991.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-25"><g><rect x="7404" y="2390" width="841" height="570" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 839px; height: 1px; padding-top: 2397px; margin-left: 7406px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/standard_buffer_manager.cpp</div><div><br /></div><div><font color="#006633"><div style="">BufferHandle StandardBufferManager::<b><i>Pin</i></b><i>(shared_ptr&lt;BlockHandle&gt; &amp;handle)</i><span style="background-color: initial; white-space: pre;">	</span></div></font><div><span style="background-color: initial;"><font color="#006633"><span style="white-space: pre;">	</span>{</font></span></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>// lock the block</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>lock_guard&lt;mutex&gt; lock(handle-&gt;lock);</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>// check if the block is already loaded</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>if (handle-&gt;state == BlockState::BLOCK_LOADED) {</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">			</span>// the block is loaded, increment the reader count and return a pointer to the handle</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">			</span>handle-&gt;readers++;</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">			</span>return handle-&gt;<b><u>Load</u></b>(handle);</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>}</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">		</span>required_memory = handle-&gt;memory_usage;</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>}</span></font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>// evict blocks until we have space for the current block</span></font></div></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space: pre;">	</span>// ...<br /></span></font></div><div><font color="#006633"><div style=""><span style="white-space: pre;">	</span>// lock the handle again and repeat the check (in case anybody loaded in the meantime)</div><div style=""><span style="white-space:pre">	</span>lock_guard&lt;mutex&gt; lock(handle-&gt;lock);</div><div style=""><span style="white-space:pre">	</span>// check if the block is already loaded</div><div style=""><span style="white-space:pre">	</span>if (handle-&gt;state == BlockState::BLOCK_LOADED) {</div><div style=""><span style="white-space:pre">		</span>// the block is loaded, increment the reader count and return a pointer to the handle</div><div style=""><span style="white-space:pre">		</span>handle-&gt;readers++;</div><div style=""><span style="white-space:pre">		</span>reservation.Resize(0);</div><div style=""><span style="white-space:pre">		</span>return handle-&gt;Load(handle);</div><div style=""><span style="white-space:pre">	</span>}</div><div style=""><span style="white-space: pre;">	</span>// now we can actually load the current block</div><div style=""><div><span style="white-space: pre;">	</span>D_ASSERT(handle-&gt;readers == 0);</div><div><span style="white-space:pre">	</span>handle-&gt;readers = 1;</div><div><span style="white-space:pre">	</span>auto buf = handle-&gt;Load(handle, std::move(reusable_buffer));</div><div><span style="white-space:pre">	</span>handle-&gt;memory_charge = std::move(reservation);</div><div><span style="white-space:pre">	</span>// In the case of a variable sized block, the buffer may be smaller than a full block.</div><div><span style="white-space: pre;">	</span>// ...<br /></div><div><span style="white-space: pre;">	</span>return buf;<br /></div></div></font></div></div></div></div></foreignObject><text x="7406" y="2411" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/standard_buffer_manager.cpp...</text></switch></g></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-29"><g><path d="M 7824.5 3440 L 7824.5 3473.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 7824.5 3478.88 L 7821 3471.88 L 7824.5 3473.63 L 7828 3471.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-27"><g><rect x="7404" y="3000" width="841" height="440" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 839px; height: 1px; padding-top: 3007px; margin-left: 7406px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/buffer/block_handle.cpp</div><div><br /></div><div><div style=""><font color="#006633"><div>BufferHandle BlockHandle::<i><b>Load</b>(shared_ptr&lt;BlockHandle&gt; &amp;handle, unique_ptr&lt;FileBuffer&gt; reusable_buffer) {</i></div><div><span style="white-space:pre">	</span>if (handle-&gt;state == BlockState::BLOCK_LOADED) {</div><div><span style="white-space:pre">		</span>// already loaded</div><div><span style="white-space:pre">		</span>D_ASSERT(handle-&gt;buffer);</div><div><span style="white-space:pre">		</span>return BufferHandle(handle, handle-&gt;buffer.get());</div><div><span style="white-space:pre">	</span>}</div><div><br /></div><div><span style="white-space:pre">	</span>auto &amp;block_manager = handle-&gt;block_manager;</div><div><span style="white-space:pre">	</span>if (handle-&gt;block_id &lt; MAXIMUM_BLOCK) {</div><div><span style="white-space:pre">		</span>auto block = AllocateBlock(block_manager, std::move(reusable_buffer), handle-&gt;block_id);</div><div><span style="white-space:pre">		</span><b><u>block_manager.Read(*block);</u></b></div><div><span style="white-space:pre">		</span>handle-&gt;buffer = std::move(block);</div><div><span style="white-space:pre">	</span>} else {</div><div><span style="white-space:pre">		</span>if (handle-&gt;can_destroy) {</div><div><span style="white-space:pre">			</span>return BufferHandle();</div><div><span style="white-space:pre">		</span>} else {</div><div><span style="white-space:pre">			</span>handle-&gt;buffer = block_manager.buffer_manager.ReadTemporaryBuffer(handle-&gt;tag, handle-&gt;block_id,</div><div><span style="white-space:pre">			</span>                                                                  std::move(reusable_buffer));</div><div><span style="white-space:pre">		</span>}</div><div><span style="white-space:pre">	</span>}</div><div><span style="white-space:pre">	</span>handle-&gt;state = BlockState::BLOCK_LOADED;</div><div><span style="white-space:pre">	</span>return BufferHandle(handle, handle-&gt;buffer.get());</div><div>}</div></font></div></div></div></div></div></foreignObject><text x="7406" y="3021" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/buffer/block_handle.cpp...</text></switch></g></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-28"><g><rect x="7404" y="3480" width="841" height="620" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 839px; height: 1px; padding-top: 3487px; margin-left: 7406px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/single_file_block_manager.cpp</div><div><br /></div><div><div style=""><font color="#006633"><div>void SingleFileBlockManager::<i><b>Read</b>(Block &amp;block) {</i></div><div><span style="white-space:pre">	</span><b><u>ReadAndChecksum</u></b>(block, BLOCK_START + NumericCast&lt;idx_t&gt;(block.id) * Storage::BLOCK_ALLOC_SIZE);</div><div>}</div><div><br /></div><div><div>void SingleFileBlockManager::<i><b>ReadAndChecksum</b>(FileBuffer &amp;block, uint64_t location) const {</i></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>// read the buffer from disk</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>block.<b><u>Read</u></b>(*handle, location);</span></div></div><div><br /></div><div><span style="color: rgb(0, 0, 0);">common/file_buffer.cpp</span><br /></div><div><br /></div><div><div>void FileBuffer::<i style=""><b>Read</b>(FileHandle &amp;handle, uint64_t location) {</i></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>handle.Read(internal_buffer, internal_size, location);</span></div><div>}</div></div><div><br /></div><div><span style="color: rgb(0, 0, 0);">common/file_system.cpp</span><br /></div><div><span style="color: rgb(0, 0, 0);"><br /></span></div><div><div>void FileHandle::Read(void *buffer, idx_t nr_bytes, idx_t location) {</div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>file_system.Read(*this, buffer, UnsafeNumericCast&lt;int64_t&gt;(nr_bytes), location);</span></div><div>}</div></div><div><br /></div><div><span style="color: rgb(0, 0, 0);">common/local_file_system.cpp</span><br /></div><div><span style="color: rgb(0, 0, 0);"><br /></span></div><div><div>void LocalFileSystem::Read(FileHandle &amp;handle, void *buffer, int64_t nr_bytes, idx_t location) {</div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>int fd = handle.Cast&lt;UnixFileHandle&gt;().fd;</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>auto read_buffer = char_ptr_cast(buffer);</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>while (nr_bytes &gt; 0) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>int64_t bytes_read =</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>    <b>pread</b>(fd, read_buffer, UnsafeNumericCast&lt;size_t&gt;(nr_bytes), UnsafeNumericCast&lt;off_t&gt;(location));</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>read_buffer += bytes_read;</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>nr_bytes -= bytes_read;</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>location += UnsafeNumericCast&lt;idx_t&gt;(bytes_read);</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>}</span></div><div>}</div></div></font></div></div></div></div></div></foreignObject><text x="7406" y="3501" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/single_file_block_manager.cpp...</text></switch></g></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-32"><g><rect x="6595" y="2140" width="650" height="60" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-31"><g><path d="M 7245 2170 L 7388.24 2237.29" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 7392.99 2239.52 L 7385.16 2239.72 L 7388.24 2237.29 L 7388.14 2233.38 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-34"><g><path d="M 6285 2248.5 L 6588.9 2156.84" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 6593.93 2155.32 L 6588.24 2160.7 L 6588.9 2156.84 L 6586.22 2153.99 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-33"><g><rect x="5835" y="2236" width="450" height="25" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-35"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 3005 1480 L 3245 1480 L 3265 1500 L 3265 1530 L 3005 1530 L 3005 1480 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,3135,1505)" pointer-events="all"/><path d="M 3245 1480 L 3245 1500 L 3265 1500 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,3135,1505)" pointer-events="all"/><path d="M 3245 1480 L 3245 1500 L 3265 1500" fill="none" stroke="none" transform="rotate(180,3135,1505)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 258px; height: 1px; padding-top: 1505px; margin-left: 3006px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">returns LogicalOperator to be passed to physical plan creation.</div></div></div></foreignObject><text x="3135" y="1509" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">returns LogicalOperator to be passed to phy...</text></switch></g></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-36"><g><rect x="2765" y="1920" width="530" height="40" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="BaSyTfyMVKxpU_2WrCr8-4"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 5360 1990 L 5530 1990 L 5550 2010 L 5550 2030 L 5360 2030 L 5360 1990 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,5455,2010)" pointer-events="all"/><path d="M 5530 1990 L 5530 2010 L 5550 2010 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,5455,2010)" pointer-events="all"/><path d="M 5530 1990 L 5530 2010 L 5550 2010" fill="none" stroke="none" transform="rotate(180,5455,2010)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 188px; height: 1px; padding-top: 2010px; margin-left: 5361px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Full scan: iterates columns (ColumnData)</div></div></div></foreignObject><text x="5455" y="2014" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Full scan: iterates columns (Co...</text></switch></g></g></g><g data-cell-id="3szLX-Pjn-mjIIh4dP89-1"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 2025 3020 L 2302.5 3020 L 2322.5 3040 L 2322.5 3090 L 2025 3090 L 2025 3020 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,2173.75,3055)" pointer-events="all"/><path d="M 2302.5 3020 L 2302.5 3040 L 2322.5 3040 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,2173.75,3055)" pointer-events="all"/><path d="M 2302.5 3020 L 2302.5 3040 L 2322.5 3040" fill="none" stroke="none" transform="rotate(180,2173.75,3055)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 296px; height: 1px; padding-top: 3055px; margin-left: 2027px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">IsSink() true:<div>LIMIT, JOIN, ORDER, SET, persistent (COPY, DELETE, INSERT, UPDATE, EXECUTE), aggregation</div><div>IsSIN(): false:</div><div>scan (SELECT), projection</div></div></div></div></foreignObject><text x="2027" y="3059" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px">IsSink() true:...</text></switch></g></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-1"><g><rect x="1410" y="1635" width="550" height="20" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="N5YosZeGglokPbs80C8m-4"><g><path d="M 1410 1645 L 1375 1645 L 1375 860 L 980 860 L 980 883.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 980 888.88 L 976.5 881.88 L 980 883.63 L 983.5 881.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-6"><g><rect x="3405" y="2178" width="640" height="244" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 638px; height: 1px; padding-top: 2185px; margin-left: 3407px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div><span style="background-color: initial;">execution/operator/scan/physical_table_scan.cpp</span><br /></div><div><br /></div><div><font color="#006633"><div style="">class PhysicalTableScan : public <b>PhysicalOperator</b><br /></div><div style=""><br /></div><div style="">SourceResultType PhysicalTableScan::<b><i>GetData</i></b><span style="background-color: initial;">(ExecutionContext &amp;context, DataChunk &amp;chunk, </span><span style="background-color: initial;">OperatorSourceInput &amp;input)</span></div><div style=""><div><span style="white-space: pre;">	</span>TableFunctionInput data(bind_data.get(), state.local_state.get(), gstate.global_state.get());</div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>function.<b>function</b>(context.client, data, chunk);</span></div><div><br /></div><div><span style="white-space: normal;"><span style="white-space: pre;">	</span>return chunk.size() == 0 ? SourceResultType::FINISHED : <span style="white-space: pre;">	</span>SourceResultType::HAVE_MORE_OUTPUT;</span></div><div><span style="white-space: normal;"><br /></span></div><div><div style="color: rgb(0, 0, 0);"><br /></div></div></div></font></div></div></div></div></foreignObject><text x="3407" y="2199" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">execution/operator/scan/physical_table_scan.cpp...</text></switch></g></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-8"><g><path d="M 3885 2178 L 3885 2144 L 3927.5 2144 L 3927.5 2110" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-9"><g><rect x="1675" y="2880" width="760" height="60" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-11"><g><path d="M 1163 4880 L 1535 4880 L 1535 2910 L 1668.63 2910" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1673.88 2910 L 1666.88 2913.5 L 1668.63 2910 L 1666.88 2906.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-10"><g><rect x="574" y="4870" width="589" height="20" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-14"><g><path d="M 1306.37 2510.25 L 1585 2510.3 L 1585 3394 L 1745 3394" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1301.12 2510.25 L 1308.12 2506.75 L 1306.37 2510.25 L 1308.12 2513.75 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-13"><g><rect x="1745" y="3384" width="290" height="20" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-20"><g><path d="M 1110 1040 L 1355 1040 L 1355 2432.5 L 1648.63 2432.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1653.88 2432.5 L 1646.88 2436 L 1648.63 2432.5 L 1646.88 2429 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-19"><g><rect x="650" y="1010" width="460" height="60" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-21"><g><rect x="1655" y="2320" width="740" height="450" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 738px; height: 1px; padding-top: 2327px; margin-left: 1657px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(0, 102, 51);"><div style="color: rgb(0, 0, 0);">parallel/meta_pipeline.cpp</div><div style="color: rgb(0, 0, 0);"><br /></div><div><span style="background-color: initial;">class MetaPipeline : public enable_shared_from_this&lt;Metapipeline&gt; {</span></div><div>private:</div><div><div><span style="white-space: pre;">	</span>//! All pipelines with a different source, but the same sink</div><div><span style="white-space: pre;">	</span>vector&lt;shared_ptr&lt;Pipeline&gt;&gt; <u>pipelines</u>;</div><div><span style="white-space: pre;">	</span>//! Dependencies within this MetaPipeline</div><div><span style="white-space: pre;">	</span>reference_map_t&lt;Pipeline, vector&lt;reference&lt;Pipeline&gt;&gt;&gt; <u>dependencies</u>;</div><div><span style="white-space: pre;">	</span>//! Other MetaPipelines that this MetaPipeline depends on</div><div><span style="white-space: pre;">	</span>vector&lt;shared_ptr&lt;MetaPipeline&gt;&gt; <u>children</u>;</div></div><div><span style="background-color: initial;"><br /></span></div><div><span style="background-color: initial;">void MetaPipeline::<i><b>Build(</b><u>PhysicalOperator &amp;op) {</u></i></span></div><div><span style="white-space: pre;">	</span>D_ASSERT(pipelines.size() == 1);</div><div><span style="white-space: pre;">	</span>D_ASSERT(children.empty());</div><div><span style="white-space: pre;">	</span>op.BuildPipelines(*pipelines.back(), *this);</div><div><span style="background-color: initial;">}</span></div></div><div style="color: rgb(0, 102, 51);"><span style="background-color: initial;"><br /></span></div><div style="color: rgb(0, 102, 51);"><span style="background-color: initial;"><div>MetaPipeline &amp;MetaPipeline::<i><b>CreateChildMetaPipeline</b>(Pipeline &amp;current, PhysicalOperator &amp;op) {</i></div><div><span style="white-space: pre;">	</span>children.<u>push_back</u>(make_shared_ptr&lt;MetaPipeline&gt;(executor, state, &amp;op));</div><div><span style="white-space: pre;">	</span>auto <u>child_meta_pipeline</u> = children.back().get();</div><div><u><span style="white-space: pre;">	</span>// child MetaPipeline must finish completely before this MetaPipeline can start</u></div><div><span style="white-space: pre;">	</span>current.<b><u>AddDependency</u></b>(child_meta_pipeline-&gt;GetBasePipeline());</div><div><span style="white-space: pre;">	</span>// child meta pipeline is part of the recursive CTE too</div><div><span style="white-space: pre;">	</span>child_meta_pipeline-&gt;recursive_cte = recursive_cte;</div><div><span style="white-space: pre;">	</span>return *child_meta_pipeline;</div><div>}</div></span></div></div></div></div></foreignObject><text x="1657" y="2341" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">parallel/meta_pipeline.cpp...</text></switch></g></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-16"><g><path d="M 1675 2690 L 1335 2690 L 1335 2403.5 L 1306.37 2403.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1301.12 2403.5 L 1308.12 2400 L 1306.37 2403.5 L 1308.12 2407 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-15"><g><rect x="1675" y="2680" width="450" height="20" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-23"><g><path d="M 2255 3220 L 2485 3220 L 2485 2657.5 L 2401.37 2657.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2396.12 2657.5 L 2403.12 2654 L 2401.37 2657.5 L 2403.12 2661 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-22"><g><rect x="1715" y="3200" width="540" height="40" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-28"><g><path d="M 1455 1921 L 1255 1921 L 1255 1725 L 1056.37 1725" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1051.12 1725 L 1058.12 1721.5 L 1056.37 1725 L 1058.12 1728.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-27"><g><rect x="1455" y="1906" width="460" height="30" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-29"><g><rect x="620" y="1715" width="430" height="20" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-33"><g><path d="M 1795 2267 L 1941.3 2267 L 1941.25 1948.87" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1941.25 1943.62 L 1944.75 1950.62 L 1941.25 1948.87 L 1937.75 1950.62 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-30"><g><rect x="1425" y="2257" width="370" height="20" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-34"><g><rect x="15" y="1395" width="560" height="220" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 558px; height: 1px; padding-top: 1402px; margin-left: 17px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>parallel/event.cpp</div><div><br /></div><div><div><font color="#006633">Event::Event(Executor &amp;executor_p)</font></div><div><font color="#006633">    : executor(executor_p), finished_tasks(0), total_tasks(0), finished_dependencies(0), </font></div><div><font color="#006633"><span style="white-space: pre;">	</span>total_dependencies(0),</font></div><div><font color="#006633">      finished(false) {</font></div><div><font color="#006633">}</font></div></div><div><font color="#006633"><br /></font></div><div><font color="#006633"><div>void Event::AddDependency(Event &amp;event) {</div><div><span style="white-space:pre">	</span>total_dependencies++;</div><div><span style="white-space:pre">	</span>event.parents.push_back(weak_ptr&lt;Event&gt;(shared_from_this()));</div><div>}</div></font></div></div></div></div></foreignObject><text x="17" y="1416" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">parallel/event.cpp...</text></switch></g></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-36"><g><path d="M 700 1669.5 L 605 1669.5 L 605 1505 L 581.37 1505" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 576.12 1505 L 583.12 1501.5 L 581.37 1505 L 583.12 1508.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-35"><g><rect x="700" y="1649" width="550" height="41" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-40"><g><path d="M 1865 1511 L 2145 1511 L 2145 2003.5 L 2181.13 2003.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2186.38 2003.5 L 2179.38 2007 L 2181.13 2003.5 L 2179.38 2000 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-38"><g><rect x="1425" y="1502" width="440" height="18" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-42"><g><path d="M 1180 2425 L 1250 2425 L 1250 2660 L 1000 2660 L 1000 2723.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1000 2728.88 L 996.5 2721.88 L 1000 2723.63 L 1003.5 2721.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-41"><g><rect x="745" y="2415" width="435" height="20" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-44"><g><rect x="0" y="1710" width="605" height="340" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 603px; height: 1px; padding-top: 1717px; margin-left: 2px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>parallel/task_scheduler.cpp</div><div><br /></div><div><div><font color="#006633">bool TaskScheduler::<i><b>GetTaskFromProducer</b>(ProducerToken &amp;token, shared_ptr&lt;Task&gt; &amp;task) </i>{</font></div><div><font color="#006633"><span style="white-space: normal;"><span style="white-space:pre">	</span>return queue-&gt;<b><u>DequeueFromProducer</u></b>(token, task);</span></font></div><div><font color="#006633">}</font></div></div><div><font color="#006633"><br /></font></div><div><font color="#006633"><div>bool ConcurrentQueue::<i><b>DequeueFromProducer</b>(ProducerToken &amp;token, </i></div><div><i><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>shared_ptr&lt;Task&gt; &amp;task) </i>{</div><div><span style="white-space:pre">	</span>lock_guard&lt;mutex&gt; producer_lock(token.producer_lock);</div><div><span style="white-space:pre">	</span>return q.<b><u>try_dequeue_from_producer</u></b>(token.token-&gt;queue_token, task);</div><div>}</div><div><br /></div><div><span style="color: rgb(0, 0, 0);">third_party/concurrentqueue/concurrentqueue.h</span><br /></div><div><span style="color: rgb(0, 0, 0);"><br /></span></div><div><div>template&lt;typename U&gt;</div><div><span style="white-space: normal;">inline bool <b><i>try_dequeue_from_producer</i></b>(producer_token_t const&amp; producer, U&amp; item)</span></div><div><span style="white-space: normal;">{</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>return static_cast&lt;ExplicitProducer*&gt;(producer.producer)-&gt;dequeue(item);</span></div><div><span style="white-space: normal;">}</span></div></div></font></div><div><font color="#006633"><br /></font></div><div><font color="#006633"><br /></font></div></div></div></div></foreignObject><text x="2" y="1731" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">parallel/task_scheduler.cpp...</text></switch></g></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-46"><g><path d="M 735 1896 L 635 1896 L 635 1795 L 611.37 1795" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 606.12 1795 L 613.12 1791.5 L 611.37 1795 L 613.12 1798.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="REHxaithMmhMOciLbmB6-45"><g><rect x="735" y="1886" width="340" height="20" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-2"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 7375 2170 L 7557 2170 L 7565 2178 L 7565 2200 L 7375 2200 L 7375 2170 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,7470,2185)" pointer-events="all"/><path d="M 7557 2170 L 7557 2178 L 7565 2178 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,7470,2185)" pointer-events="all"/><path d="M 7557 2170 L 7557 2178 L 7565 2178" fill="none" stroke="none" transform="rotate(180,7470,2185)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 188px; height: 1px; padding-top: 2185px; margin-left: 7377px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Case: uncompressed string</div></div></div></foreignObject><text x="7377" y="2189" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px">Case: uncompressed string</text></switch></g></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-3"><g><rect x="8255" y="2200" width="861" height="410" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 859px; height: 1px; padding-top: 2207px; margin-left: 8257px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/compression/string_uncompressed.cpp</div><div><br /></div><div><div style=""><font color="#006633"><div>void UncompressedStringStorage::StringScanPartial(ColumnSegment &amp;segment, ColumnScanState &amp;state, idx_t scan_count,</div><div>                                                  Vector &amp;result, idx_t result_offset) {</div><div><span style="white-space:pre">	</span>// clear any previously locked buffers and get the primary buffer handle</div><div><span style="white-space:pre">	</span>auto &amp;scan_state = state.scan_state-&gt;Cast&lt;StringScanState&gt;();</div><div><span style="white-space:pre">	</span>auto start = segment.GetRelativeIndex(state.row_index);</div><div><br /></div><div><span style="white-space:pre">	</span>auto baseptr = scan_state.handle.Ptr() + segment.GetBlockOffset();</div><div><span style="white-space:pre">	</span><u>auto dict = GetDictionary(segment, scan_state.handle);</u></div><div><span style="white-space:pre">	</span>auto base_data = reinterpret_cast&lt;int32_t *&gt;(baseptr + DICTIONARY_HEADER_SIZE);</div><div><span style="white-space:pre">	</span>auto result_data = FlatVector::GetData&lt;string_t&gt;(result);</div><div><br /></div><div><span style="white-space:pre">	</span>int32_t previous_offset = start &gt; 0 ? base_data[start - 1] : 0;</div><div><br /></div><div><span style="white-space:pre">	</span>for (idx_t i = 0; i &lt; scan_count; i++) {</div><div><span style="white-space:pre">		</span>// std::abs used since offsets can be negative to indicate big strings</div><div><span style="white-space:pre">		</span>auto string_length = UnsafeNumericCast&lt;uint32_t&gt;(std::abs(base_data[start + i]) - std::abs(previous_offset));</div><div><span style="white-space:pre">		</span><u>result_data[result_offset + i] =</u></div><div><u><span style="white-space:pre">		</span>    FetchStringFromDict(segment, dict, result, baseptr, base_data[start + i], string_length);</u></div><div><span style="white-space:pre">		</span>previous_offset = base_data[start + i];</div><div><span style="white-space:pre">	</span>}</div><div>}</div></font></div></div></div></div></div></foreignObject><text x="8257" y="2221" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/compression/string_uncompressed.cpp...</text></switch></g></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-4"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 8595 2550 L 8886 2550 L 8895 2559 L 8895 2580 L 8595 2580 L 8595 2550 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,8745,2565)" pointer-events="all"/><path d="M 8886 2550 L 8886 2559 L 8895 2559 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,8745,2565)" pointer-events="all"/><path d="M 8886 2550 L 8886 2559 L 8895 2559" fill="none" stroke="none" transform="rotate(180,8745,2565)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 298px; height: 1px; padding-top: 2557px; margin-left: 8597px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Loads the string values from dictionary into result data.</div></div></div></foreignObject><text x="8597" y="2569" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px">Loads the string values from dictionary into resul...</text></switch></g></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-7"><g><rect x="9116" y="2200" width="861" height="520" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 859px; height: 1px; padding-top: 2207px; margin-left: 9118px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/compression/dictionary_compression.cpp</div><div><br /></div><div><font color="#006633"><div style=""><span style="background-color: initial;">unique_ptr&lt;SegmentScanState&gt; DictionaryCompressionStorage::<b><i>StringInitScan</i></b><i>(ColumnSegment &amp;segment) </i>{</span></div></font><div><font color="#006633"><span style="font-size: 14px; white-space: normal;"><span style="white-space:pre">	</span>auto state = make_uniq&lt;CompressedStringScanState&gt;();</span></font></div><div><font color="#006633"><span style="font-size: 14px; white-space: normal;"><span style="white-space:pre">	</span>auto &amp;buffer_manager = BufferManager::GetBufferManager(segment.db);</span></font></div><div><font color="#006633"><span style="font-size: 14px; white-space: normal;"><span style="white-space:pre">	</span><b>state-&gt;handle = <u>buffer_manager.Pin(segment.block);</u></b></span></font></div><div><font color="#006633"><span style="font-size: 14px;"><br /></span></font></div><div><font color="#006633"><span style="font-size: 14px; white-space: normal;"><span style="white-space:pre">	</span>auto baseptr = state-&gt;handle.Ptr() + segment.GetBlockOffset();</span></font></div><div><font color="#006633"><span style="font-size: 14px;"><br /></span></font></div><div><font color="#006633"><span style="font-size: 14px; white-space: normal;"><span style="white-space:pre">	</span>// Load header values</span></font></div><div><font color="#006633"><span style="font-size: 14px; white-space: normal;"><span style="white-space:pre">	</span><u>auto dict = DictionaryCompressionStorage::GetDictionary(segment, state-&gt;handle);</u></span></font></div><div><font color="#006633"><span style="font-size: 14px; white-space: normal;"><span style="white-space:pre">	</span>auto header_ptr = reinterpret_cast&lt;dictionary_compression_header_t *&gt;(baseptr);</span></font></div><div><font color="#006633"><span style="font-size: 14px; white-space: normal;"><span style="white-space:pre">	</span>auto index_buffer_offset = Load&lt;uint32_t&gt;(data_ptr_cast(&amp;header_ptr-&gt;index_buffer_offset));</span></font></div><div><font color="#006633"><span style="font-size: 14px; white-space: normal;"><span style="white-space:pre">	</span>auto index_buffer_count = Load&lt;uint32_t&gt;(data_ptr_cast(&amp;header_ptr-&gt;index_buffer_count));</span></font></div><div><font color="#006633"><span style="font-size: 14px; white-space: normal;"><span style="white-space:pre">	</span>state-&gt;current_width = (bitpacking_width_t)(Load&lt;uint32_t&gt;(data_ptr_cast(&amp;header_ptr-&gt;bitpacking_width)));</span></font></div></div><div><font color="#006633"><span style="font-size: 14px; white-space: normal;"><br /></span></font></div><div><font color="#006633"><div style=""><span style="white-space: pre;">	</span>auto index_buffer_ptr = reinterpret_cast&lt;uint32_t *&gt;(baseptr + index_buffer_offset);</div><div style=""><br /></div><div style=""><span style="white-space:pre">	</span>state-&gt;dictionary = make_buffer&lt;Vector&gt;(segment.type, index_buffer_count);</div><div style=""><span style="white-space:pre">	</span>auto dict_child_data = FlatVector::GetData&lt;string_t&gt;(*(state-&gt;dictionary));</div><div style=""><br /></div><div style=""><span style="white-space:pre">	</span>for (uint32_t i = 0; i &lt; index_buffer_count; i++) {</div><div style=""><span style="white-space:pre">		</span>// NOTE: the passing of dict_child_vector, will not be used, its for big strings</div><div style=""><span style="white-space:pre">		</span>uint16_t str_len = GetStringLength(index_buffer_ptr, i);</div><div style=""><span style="white-space:pre">		</span><u>dict_child_data[i] =</u></div><div style=""><u><span style="white-space:pre">		</span>    FetchStringFromDict(segment, dict, baseptr, UnsafeNumericCast&lt;int32_t&gt;(index_buffer_ptr[i]), str_len);</u></div><div style=""><span style="white-space:pre">	</span>}</div><div style=""><br /></div><div style=""><span style="white-space:pre">	</span>return std::move(state);</div><div style="">}</div></font></div></div></div></div></foreignObject><text x="9118" y="2221" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/compression/dictionary_compression.cpp...</text></switch></g></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-8"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 9635 2270 L 9895 2270 L 9905 2280 L 9905 2330 L 9635 2330 L 9635 2270 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,9770,2300)" pointer-events="all"/><path d="M 9895 2270 L 9895 2280 L 9905 2280 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,9770,2300)" pointer-events="all"/><path d="M 9895 2270 L 9895 2280 L 9905 2280" fill="none" stroke="none" transform="rotate(180,9770,2300)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 268px; height: 1px; padding-top: 2300px; margin-left: 9637px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">From column segment block handle, init function sets buffer pin into state handle.</div></div></div></foreignObject><text x="9637" y="2304" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px">From column segment block handle, init functi...</text></switch></g></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-9"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 9115 2170 L 9297 2170 L 9305 2178 L 9305 2200 L 9115 2200 L 9115 2170 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,9210,2185)" pointer-events="all"/><path d="M 9297 2170 L 9297 2178 L 9305 2178 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,9210,2185)" pointer-events="all"/><path d="M 9297 2170 L 9297 2178 L 9305 2178" fill="none" stroke="none" transform="rotate(180,9210,2185)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 188px; height: 1px; padding-top: 2185px; margin-left: 9117px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Case: dictionary compression</div></div></div></foreignObject><text x="9117" y="2189" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px">Case: dictionary compression</text></switch></g></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-10"><g><rect x="9977" y="2200" width="861" height="620" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 859px; height: 1px; padding-top: 2207px; margin-left: 9979px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 14px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>storage/compression/dictionary_compression.cpp</div><div><br /></div><div><div style=""><font color="#006633"><div>template &lt;bool ALLOW_DICT_VECTORS&gt;</div><div>void DictionaryCompressionStorage::StringScanPartial(ColumnSegment &amp;segment, ColumnScanState &amp;state, idx_t scan_count,</div><div>                                                     Vector &amp;result, idx_t result_offset) {</div><div><span style="white-space:pre">	</span>// clear any previously locked buffers and get the primary buffer handle</div><div><span style="white-space:pre">	</span>auto &amp;scan_state = state.scan_state-&gt;Cast&lt;CompressedStringScanState&gt;();</div><div><span style="white-space:pre">	</span>auto start = segment.GetRelativeIndex(state.row_index);</div><div><br /></div><div><span style="white-space:pre">	</span><u>auto baseptr = scan_state.handle.Ptr() + segment.GetBlockOffset();</u></div><div><span style="white-space: pre;">	</span>auto dict = DictionaryCompressionStorage::GetDictionary(segment, scan_state.handle);</div><div><br /></div><div><span style="white-space:pre">	</span>auto header_ptr = reinterpret_cast&lt;dictionary_compression_header_t *&gt;(baseptr);</div><div><span style="white-space:pre">	</span>auto index_buffer_offset = Load&lt;uint32_t&gt;(data_ptr_cast(&amp;header_ptr-&gt;index_buffer_offset));</div><div><span style="white-space:pre">	</span>auto index_buffer_ptr = reinterpret_cast&lt;uint32_t *&gt;(baseptr + index_buffer_offset);</div><div><br /></div><div><u><span style="white-space:pre">	</span>auto base_data = data_ptr_cast(baseptr + DICTIONARY_HEADER_SIZE);</u></div><div><span style="white-space: pre;">	</span>auto result_data = FlatVector::GetData&lt;string_t&gt;(result);</div><div><span style="text-decoration-line: underline; white-space: pre;">	</span>...<br /></div><div><span style="white-space: pre;">	</span>// Case of Standard vector<br /></div><div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>idx_t decompress_count = BitpackingPrimitives::RoundUpToAlgorithmGroupSize(scan_count);</span></div><div><br /></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>// Create a selection vector of sufficient size if we don't already have one.</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>if (!scan_state.sel_vec || scan_state.sel_vec_size &lt; decompress_count) {</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>scan_state.sel_vec_size = decompress_count;</span></div><div><span style="white-space: normal;"><span style="white-space:pre">		</span>scan_state.sel_vec = make_buffer&lt;SelectionVector&gt;(decompress_count);</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>}</span></div><div><br /></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>// Scanning 1024 values, emitting a dict vector</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>data_ptr_t dst = data_ptr_cast(scan_state.sel_vec-&gt;data());</span></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>data_ptr_t src = data_ptr_cast(&amp;base_data[(start * scan_state.current_width) / 8]);</span></div><div><br /></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>BitpackingPrimitives::UnPackBuffer&lt;sel_t&gt;(dst, src, scan_count, scan_state.current_width);</span></div><div><br /></div><div><span style="white-space: normal;"><span style="white-space:pre">	</span>result.Slice(*(scan_state.dictionary), *scan_state.sel_vec, scan_count);</span></div></div></font></div></div></div></div></div></foreignObject><text x="9979" y="2221" fill="rgb(0, 0, 0)" font-family="&quot;Helvetica&quot;" font-size="14px">storage/compression/dictionary_compression.cpp...</text></switch></g></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-11"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 10605 2515 L 10855 2515 L 10875 2535 L 10875 2575 L 10605 2575 L 10605 2515 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,10740,2545)" pointer-events="all"/><path d="M 10855 2515 L 10855 2535 L 10875 2535 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,10740,2545)" pointer-events="all"/><path d="M 10855 2515 L 10855 2535 L 10875 2535" fill="none" stroke="none" transform="rotate(180,10740,2545)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 268px; height: 1px; padding-top: 2522px; margin-left: 10607px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Case of standard vector:<div>Unpacks 1024 values from base_data</div><div>t<span style="background-color: initial;">o scan_state.sel_vec-&gt;data</span></div></div></div></div></foreignObject><text x="10607" y="2534" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px">Case of standard vector:...</text></switch></g></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-12"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 10595 2700 L 10853 2700 L 10865 2712 L 10865 2790 L 10595 2790 L 10595 2700 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,10730,2745)" pointer-events="all"/><path d="M 10853 2700 L 10853 2712 L 10865 2712 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,10730,2745)" pointer-events="all"/><path d="M 10853 2700 L 10853 2712 L 10865 2712" fill="none" stroke="none" transform="rotate(180,10730,2745)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 268px; height: 1px; padding-top: 2707px; margin-left: 10597px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">result will refer to scan_state.dictionary (reinterpret = re-point the vector's buffer to new buffer) but <span style="background-color: initial;">slice updates the vector's buffer with the current selection vector (DictBuffer contains selection vector).</span><div><div><br /><div><br /><div><br /></div></div></div></div></div></div></div></foreignObject><text x="10597" y="2719" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px">result will refer to scan_state.dictionary (r...</text></switch></g></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-13"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 9667 2575 L 9942 2575 L 9955 2588 L 9955 2610 L 9667 2610 L 9667 2575 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,9811,2592.5)" pointer-events="all"/><path d="M 9942 2575 L 9942 2588 L 9955 2588 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,9811,2592.5)" pointer-events="all"/><path d="M 9942 2575 L 9942 2588 L 9955 2588" fill="none" stroke="none" transform="rotate(180,9811,2592.5)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 286px; height: 1px; padding-top: 2593px; margin-left: 9668px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Loads string values from dict into state-&gt;dictionary.</div></div></div></foreignObject><text x="9811" y="2596" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Loads string values from dict into state-&gt;dictio...</text></switch></g></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-14"><g><rect x="4995" y="1007" width="300" height="13" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-25"><g><path d="M 5295 1013.5 L 5505 1013.5 L 5505 1270 L 4905 1270 L 4905 1615.5 L 4928.63 1615.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4933.88 1615.5 L 4926.88 1619 L 4928.63 1615.5 L 4926.88 1612 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-15"><g><rect x="6595" y="2210" width="650" height="140" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-17"><g><path d="M 7325 2420 L 7355 2420 L 7355 2160 L 8470.3 2160 L 8470.26 2193.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 8470.25 2198.88 L 8466.76 2191.88 L 8470.26 2193.63 L 8473.76 2191.89 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="jrIA1Oau7DQlzkF8zSXh-16"><g><rect x="6595" y="2350" width="730" height="140" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-1"><g><rect x="665" y="3290" width="350" height="20" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-3"><g><path d="M 1015 3300 L 1295 3300 L 1295 4820 L 1061.37 4820" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1056.12 4820 L 1063.12 4816.5 L 1061.37 4820 L 1063.12 4823.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-4"><g><rect x="555" y="4800" width="500" height="40" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-6"><g><path d="M 735 3975 L 1235 3975 L 1235 4627.5 L 1061.37 4627.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1056.12 4627.5 L 1063.12 4624 L 1061.37 4627.5 L 1063.12 4631 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-5"><g><rect x="580" y="3960" width="155" height="30" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-7"><g><rect x="555" y="4570" width="500" height="230" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-8"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 1086 1709 L 1216 1709 L 1226 1719 L 1226 1749 L 1086 1749 L 1086 1709 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,1156,1729)" pointer-events="all"/><path d="M 1216 1709 L 1216 1719 L 1226 1719 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,1156,1729)" pointer-events="all"/><path d="M 1216 1709 L 1216 1719 L 1226 1719" fill="none" stroke="none" transform="rotate(180,1156,1729)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 138px; height: 1px; padding-top: 1729px; margin-left: 1087px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Execution Flow</div></div></div></foreignObject><text x="1156" y="1733" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Execution Flow</text></switch></g></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-10"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 965 4550 L 1095 4550 L 1105 4560 L 1105 4590 L 965 4590 L 965 4550 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,1035,4570)" pointer-events="all"/><path d="M 1095 4550 L 1095 4560 L 1105 4560 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,1035,4570)" pointer-events="all"/><path d="M 1095 4550 L 1095 4560 L 1105 4560" fill="none" stroke="none" transform="rotate(180,1035,4570)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 138px; height: 1px; padding-top: 4570px; margin-left: 966px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">End of execution flow</div></div></div></foreignObject><text x="1035" y="4574" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">End of execution flow</text></switch></g></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-11"><g><rect x="4934.75" y="3370" width="760.25" height="140" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-12"><g><rect x="1045" y="578" width="350" height="20" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-6"><g><path d="M 1395 588 L 1520 588 L 1520 725 L 1638.63 725" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1643.88 725 L 1636.88 728.5 L 1638.63 725 L 1636.88 721.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-13"><g><rect x="1014" y="258" width="350" height="20" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="WGzQBty7jZvvSMfaaSwA-3"><g><path d="M 1364 268 L 1504.5 268 L 1504.5 167.5 L 1638.63 167.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1643.88 167.5 L 1636.88 171 L 1638.63 167.5 L 1636.88 164 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-16"><g><path d="M 1705 1427 L 2135 1427 L 2135 950 L 2153.63 950" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2158.88 950 L 2151.88 953.5 L 2153.63 950 L 2151.88 946.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-14"><g><rect x="1421" y="1418" width="284" height="18" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-17"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 5505 1695 L 5675 1695 L 5695 1715 L 5695 1735 L 5505 1735 L 5505 1695 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,5600,1715)" pointer-events="all"/><path d="M 5675 1695 L 5675 1715 L 5695 1715 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,5600,1715)" pointer-events="all"/><path d="M 5675 1695 L 5675 1715 L 5695 1715" fill="none" stroke="none" transform="rotate(180,5600,1715)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 188px; height: 1px; padding-top: 1715px; margin-left: 5506px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Repeat till max row</div></div></div></foreignObject><text x="5600" y="1719" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Repeat till max row</text></switch></g></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-18"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 5232.37 1798 L 5377.37 1798 L 5397.37 1818 L 5397.37 1828 L 5232.37 1828 L 5232.37 1798 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,5314.87,1813)" pointer-events="all"/><path d="M 5377.37 1798 L 5377.37 1818 L 5397.37 1818 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,5314.87,1813)" pointer-events="all"/><path d="M 5377.37 1798 L 5377.37 1818 L 5397.37 1818" fill="none" stroke="none" transform="rotate(180,5314.87,1813)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 163px; height: 1px; padding-top: 1813px; margin-left: 5233px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Zone map check</div></div></div></foreignObject><text x="5315" y="1817" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Zone map check</text></switch></g></g></g><g data-cell-id="hMiaAHsJNJSiOz9h3nNl-4"><g><path d="M 3295 1940 L 3403.79 1376.25" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 3404.79 1371.1 L 3406.9 1378.63 L 3403.79 1376.25 L 3400.03 1377.31 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-20"><g style="filter: drop-shadow(rgba(0, 0, 0, 0.25) 2px 3px 2px);"><path d="M 3115 1290 L 3332 1290 L 3345 1303 L 3345 1350 L 3115 1350 L 3115 1290 Z" fill="url(#mx-gradient-fff2a1-1-fff9b2-1-s-0)" stroke="none" transform="rotate(180,3230,1320)" pointer-events="all"/><path d="M 3332 1290 L 3332 1303 L 3345 1303 Z" fill-opacity="0.05" fill="#000000" stroke="none" transform="rotate(180,3230,1320)" pointer-events="all"/><path d="M 3332 1290 L 3332 1303 L 3345 1303" fill="none" stroke="none" transform="rotate(180,3230,1320)" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 228px; height: 1px; padding-top: 1320px; margin-left: 3117px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div>BindSelectNode:</div>Sets details such as table, select, column count etc on BoundQueryNode</div></div></div></foreignObject><text x="3117" y="1324" fill="#000000" font-family="&quot;Helvetica&quot;" font-size="12px">BindSelectNode:Sets details such as ta...</text></switch></g></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-22"><g><path d="M 5054 2099 L 4915 2099 L 4915 3405 L 4928.38 3405" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4933.63 3405 L 4926.63 3408.5 L 4928.38 3405 L 4926.63 3401.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g></g><g data-cell-id="jeN1KzrKdbGSarCPJsWu-21"><g><rect x="5054" y="2089" width="261" height="20" fill="none" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/></g></g></g></g></g></svg>